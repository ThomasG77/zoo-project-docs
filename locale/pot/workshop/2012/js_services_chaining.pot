# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011, Nicolas Bozon, GÃ©rald Fenoy, Jeff McKenna
# This file is distributed under the same license as the ZOO Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ZOO Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-24 19:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../workshop/2012/js_services_chaining.txt:5
# 1b5f71279da24f138f1160d50f732639
msgid "Playing with buildign blocks - Creating JavaScript Web Services"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:0
# 7fdb24c94be74db3a9ba8593ce951dc4
msgid "Table of Contents"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:12
# e398e11e9dd14c909032b156f3ac2533
msgid "Introduction"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:15
# 121580047e9041dcb977b48efc15ad07
msgid "This section illustrate how you can use JavaScript on the server-side to chain services together to build new ones. You will create a ZOO Services Provider using the services you seen before and the WFS server using the ZOO-API. The final goal is to query all POIs included in a buffer around a feature and to highlight them using a mask around this buffer. The following screenshot show you the expected result:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:26
# ad536e78c54d4fc191a91e4d4f8461dd
msgid "You can decompose the result above in two different ones: the mask around the buffer and the points included in the buffer. So you will create two different Services: one called ``BufferMask`` and another one called ``BufferRequest``."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:30
# 495a8f52201d4dbba7c3876e8712d7c9
msgid "But before implementing any JavaScript Service, you will get an overview of how to use ZOO-API from your ZOO-Project installation in the next section."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:33
# ade53365b41f4396ad7997e6166d7659
msgid "As before, you first create a new directory to store files for your new Services Provider named ``ws2012js``:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:42
# cfd88758510b49ee89a51ac7c99c4fc2
msgid "ZOO-API Overview"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:44
# a5f439d8149f425facb1abe4822d7d8e
msgid "ZOO-API and ZOO-Kernel JavaScript support make you able to run services implemented in JavaScript on the server side. JavaScript is a popular programing language but mostly used on the client side. Let say from a browser, but here it is a bit different."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:49
# acede758d35c42aca0f5803f305f8ead
msgid "To support JavaScript language ZOO-Kernel use the `SpiderMonkey <https://developer.mozilla.org/en/SpiderMonkey>`__ API to create a javascript runtime environment from which it will load your JS file then extract the function corresponding to the service to run it using the prefilled parameters. The JavaScript runtime environment created by the ZOO-Kernel depend on your setup. If you placed the ``ZOO-api.js`` and ``ZOO-proj4js.js`` in the same directory as your ZOO-Kernel it means that your environment will contains ZOO-API and Proj4js will be loaded before your service. In such case you can access to the Classes defined in the JavaScript ZOO-API to manipulate geographic data, for more informations please refer to the `ZOO-API Documentation <http://zoo-project.org/docs/api/index.html>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:60
# 6d87494d18f14c1a98d21945b4ee76ad
msgid "Even if it can be useful to run JavaScript on the server side, you should remember that some basic JavaScript functions you are familiar with does not exist or get a different behavior. For instance the simple ``alert`` function will display messages in apache error logs rather than in a window when used from a browser. The ``alert`` function can be used as follow:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:70
# 5cc2834615524097b8298802cf6f84e1
msgid "There is no XMLHttpRequest available in the JavaScript evironement your service will run into. Hopefully, the ZOO-Kernel expose a C function to the JavaScript world named: ``JSRequest``. This function make you able from your JavaScript services to call other WPS services (locally or remotelly) or other kind OGC services such as WFS. When you are using the ZOO-API it is possible to call Services using a ``ZOO.Process`` instance [#f3]_, to parse WPS Responses using ``ZOO.Format.WPS`` (cf. `ref <http://zoo-project.org/docs/api/zoo-process.html>`__)."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:79
# cf394e6851e74fa29b010b821931c035
msgid "As for Python services you already seen in previous sections, the functions corresponding to a Service should take three arguments: ``conf``, ``inputs`` and ``outputs`` [#f4]_. Nevertheless, as the ZOO-Kernel is not able to access the values modified [#f5]_ by the Service code, rather than returning an integer as in Python, here you'll need to return both the integer value representing the Status of your Service in a JavaScript Object and the resulting ``outputs`` values as an Object. You can see in the following an example of a JavaScript Service code:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:99
# 75320c36a11642df914ddc23d25b9c5b
msgid "Before starting to implement the Services we will need to get our final BufferRequest service, let start with a simplier one."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:103
# d3ef4777b1604211a2bf536f7420863b
msgid "The Mask Service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:105
# c311e3ca42604dcf9dc12812e596bcd5
msgid "In this section you will learn how to create your first JavaScript service which will simply return a rectangular mask around a selected feature. To build this mask you will use the Buffer service to create a buffer big enough around a selected geometry to cover a significant part of your map. You can see the expected result in the following screenshot:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:115
# e925e5845c7d464cb7c3ad23b459c62e
msgid "As before, you will first start by writting the ZCFG, then you will write the JavaScript source code and finish by publishing your Services Provider."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:119
#: ../../workshop/2012/js_services_chaining.txt:277
#: ../../workshop/2012/js_services_chaining.txt:402
# 78262405b8b3495bbe9f8605e1d56521
# 8606d8ab9079461f8404d5d4a3d24545
# fea62ac357a241ab86c3bcdd0c2be41d
msgid "The ZCFG"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:121
# d4d0bb4a7b7a46948df2b3ae8a7fc0c9
msgid "Open the file named ``~/zoo-ws-2012/src/zoo-project/zoo-services/ws2012js/cgi-env/Mask.zcfg`` with your favorite text editor and add the following content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:160
# 32fb6797c7534d86b0106393efea67bd
msgid "Here you simply define one default ``ComplexData`` for both ``inputData`` and ``Result``: a GML and a GeoJSON respectively [#f6]_."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:164
#: ../../workshop/2012/js_services_chaining.txt:322
# 84b476f7bad04af696e9d42170e426a2
# a38fdde23f74417a9758f480c65c0add
msgid "The JavaScript service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:166
# 515c91c9d55d4556a8c8755c2a6b2b2c
msgid "As you will have to request the Buffer service many times from your service, you will first define a ``Buffer`` function as follow. It uses the ``ZOO.Process`` to request the Buffer service you seen in the previous section."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:170
# 0632fff8ce144abe86cf4800871f3c5f
msgid "Open a file named ``~/zoo-ws-2012/src/zoo-project/zoo-services/ws2012js/cgi-env/foss4gws.js`` and add the following content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:204
# 1f77e9338ff54dcdafc44824038bad00
msgid "From line 12 to 15, you give a GeoJSON string (created from ``inputData``) for InputPolygon and, on line 14, you set the BufferDistance value to ``bDist``. On line 16, you define Result as a ResponseDocument, so you'll have to parse the WPS response using the ZOO.Format.WPS, on line 21."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:209
# 28d2af48dc174e47b9028fa68847c9b2
msgid "On line 17, you create a `ZOO.Process <http://zoo-project.org/docs/api/zoo-process.html#zoo-process>`__ instance providing the ZOO-Kernel url and the Service name. Then, on line 18, you run the request passing inputs and outputs previously defined (from line 12 to 15)."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:214
# 90c766a1e6cc4d598d52f0cd876a5697
msgid "Now, you get your ``Buffer`` function, it is time to create your first JavaScript service. So, edit your ``foss4gws.js`` file you created before and add the following content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:250
#: ../../workshop/2012/js_services_chaining.txt:383
#: ../../workshop/2012/js_services_chaining.txt:507
# f2473bbbd882437d90b5f4279392d1e5
# 020d6dbf4e404300978103fd6a86a186
# 0f9bf91a187942f49b29c771a8d86d0c
msgid "Publish and use your Service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:252
# 1af38ca5423243cea53441d982d1a2b2
msgid "Now you get both your ZCFG and your service code ready, you need to deploy your new Services Provider using the following command:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:259
# 456f240af11d46b8a1cd256a64839795
msgid "Now you are ready to use your JavaScript service by loading the the following `url <http://localhost/zoows-demo/spatialtools.html>`__, click on a street then click on the \"Mask\" button."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:264
# 29726320b706450a8f0eca08495c9ea7
msgid "BufferMask Service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:266
# fe13e18775d94c5e993f18d644806c06
msgid "In this section you will implement a simple JavaScript service which will be able create a hole in the mask you created in `previous section <#mask-service>`__. This service will be used to highlight the buffer zone around a selected fature. You get a preview of the expected result in the following screenshot:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:279
# 4aafc3dbb4bf4d7e98a24a84f348c120
msgid "Open the file named ``~/zoo-ws-2012/src/zoo-project/zoo-services/ws2012js/cgi-env/BufferMask.zcfg`` with your favorite text editor and copy / paste the following content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:318
# 6d103bfd82d6417aacefa441feb76d13
msgid "This ZCFG is similar to the previous one. Please, refer to comments in the `previous section <#the-zcfg>`__ for more informations."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:324
# f07527c1b8c64633acbc4a88326d565c
msgid "In this Service you will use same source code (until line 19) you used in the `previous section <#the-javascript-service>`__. Indeed, you should compute the Mask as you did before then compute Buffer for creating a hole in the mask (on line 22) to run the Difference service (from line 25 to 40)."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:385
#: ../../workshop/2012/js_services_chaining.txt:509
# 69abea16e6c84ac2a3493c7790947ce5
# 651852d53b0b48e58a0d20d0f8abe7f7
msgid "Now, you can publish your service as you did `before <#publish-your-service>`__. To use your service, please use the following `url <http://localhost/zoows-demo/spatialtools.html>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:390
# e39b49b99936469cb26c5090b4af9eca
msgid "BufferRequest service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:392
# 6146be0419524f8aa658f5ef6dd28ce9
msgid "In this section, you will create a new Service: ``BufferRequest`` which will request POIs included in the Buffer around a selected feature [#f7]_. You will use the ``poi`` layer served as WFS through your local mapserver installation. You can see in the following screenshot the expected result:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:404
# 51e4f9a90d5949bc90f16a5f720e82f4
msgid "Open the file named ``~/zoo-ws-2012/zoo-project/zoo-services/ws2011js/cgi-env/BufferRequest.zcfg`` with your favorite text editor and copy / paste the following content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:445
# 0c271fab8efb4e4c94997aeaeeb6a328
msgid "The JavaScript code"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:447
# 72ae1629adb6416e9bfb3336bb775264
msgid "As in the previous Service, you will compute a buffer around the input feature. But then you will request POIs available in the Buffer extent using a WFS request to use them to run ``Intersection`` service using the initial Buffer. The WFS request is useful to limit the number of points to use when requesting the ``Intersection`` Service."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:501
# 4c05a938c14a487d9adeb40c954f5b4e
msgid "to take advantage of the ZOO-Kernel cache system, you directly use the WFS request  as ``xlink:href`` rather than value for ``InputEntity2`` (from line 31 to 34) and use ``text/xml`` ``mimeType`` (on line 40). Indeed, the ZOO-API doesn't use the internal cache mechanisms."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:513
# 6a30215e27f2494cbf05b5eed8f216f0
msgid "You can click on \"Buffer Request and Mask\"  to get the same result as presented in  `the initial screenshot <#introduction>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:517
# c83f98f2b09248aaa20ea6e36d146036
msgid "Conclusion"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:519
# b103fcee4d584960a5b1af1514f11a25
msgid "After understanding how basic Geometric Operation Services works, here you built step by step new JavaScript services which reuse the previous ones and combine them in different ways. This was achieved using the ZOO-API, composed by C functions exposed by the ZOO-Kernel to the JavaScript services runtime environement and the JS files which can be optionally installed."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:526
# b390748b79ae44e9b42effa962bebef0
msgid "Footnotes"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:527
# 1b7ea5a4dc894922901c7f4eb2878cdd
msgid "The ``ZOO.Process`` class uses ``JSRequest`` (cf. `ref <http://zoo-project.org/docs/api/zoo-format-wps.html>`__). You will get example of use `later  <#the-javascript-service>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:530
# 12bb9f7de758452ca06b6c434794cb8a
msgid "So ``conf``, ``inputs`` and ``outputs`` are simple JavaScript objects, similar to the Python dictionaries used in the `previous section <ogr_base_vect_ops.html>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:532
# c800c02d209d43899ff85aebb573f757
msgid "Such as ``conf``, ``inputs`` and ``outputs``."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:533
# d5dbe813522e4b058997ca6ced1000ac
msgid "Using one of the available ``ZOO.formats`` you are also able to support various ``ComplexData`` for both input and output of the service. To simplify the presentation here, you will use only this default ones."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:536
# 59766d879d2048fdbba802018652f5e4
msgid "So in the hole you created in the previous section."
msgstr ""

