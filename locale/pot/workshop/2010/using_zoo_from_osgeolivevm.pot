# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011, Nicolas Bozon, GÃ©rald Fenoy, Jeff McKenna
# This file is distributed under the same license as the ZOO Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ZOO Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-24 19:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:4
# f05550d805e542e6a7699d9beadeef05
msgid "Using ZOO from an OSGeoLive virtual machine"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:0
# 0d98be2c8c2f45588ea1fea9932bd618
msgid "Table of Contents"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:10
# 7f8c15fe2ceb489c92f463cb2c2a6b59
msgid "`OSGeoLive <http://live.osgeo.org/>`__ is a live DVD and virtual machine based on  `Xubuntu <http://www.xubuntu.org/>`__ that allows you to try a wide variety of open source geospatial software without installing anything. It is composed entirely of free software and include ZOO 1.0 this year, for testing purpose."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:13
# f4bf34330e5b44deaeb701a268db8c0e
msgid "ZOO Kernel Installation"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:15
# 57c1312616334e84838916b3b2167489
msgid "As already said in introduction, an OSGeoLive virtual machine image disk has been installed on your computer, allowing you to use ZOO Kernel in a development environment directly. Using a virtual machine image disk seems to be the simplest way to use ZOO Kernel and to develop ZOO Services locally, as we can ensure that everything requested for compiling C Services and running Python ones is available and ready to use. Every ZOO related material and source code have been placed in ``/home/user/zoows`` directory. We will work inside it during this workshop. As the binary version of ZOO Kernel is already compiled and stored in ``/home/user/zoows/sources/zoo-kernel``, you only have to copy two important files inside the ``/usr/lib/cgi-bin`` directory : ``zoo_loader.cgi`` and the ``main.cfg`` in order to make ZOO Kernel available, using the following commands :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:33
# 536b8d23ff3c44cda2afa927f62ad287
msgid "Please note that we will talk about ZOO Kernel or ``zoo_loader.cgi`` script without any distinction during this workshop."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:36
# 40320916eee04ded9fd3bf5bebd1cf2b
msgid "The ``main.cfg`` file contains metadata informations about the identification and provider but also some important settings. The file is composed of various sections, namely main, identification and provider per default. Obviously, you are free to add new sections to the file if you need them for a specific Service. Nevertheless, you have to know that the env and lenv sections name are used in a specific way."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:42
# 71d2fd88323d44fab5cde415c5b32bf9
msgid "The env section lets you define environment variables that your Service requires during its runtime. For instance, if your Service requires to access to a X server running on framebuffer, then you will have to set the ``DISPLAY`` environnement variably, in this case you would add ``DISPLAY=:1`` line in your env section."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:47
# bd3dbbb700aa4904bb1366c36a8cd67e
msgid "As for the env section, there is the section lenv where specific informations about status informations of a running Service will be written by the ZOO Kernel or the ZOO Services. For instance, when your service failed, you can set the value for message in lenv to see it displayed in the Status node of the ExecuteResponse returned back to the client. If your service will take long time and can get informations about processing status, you can then set a value between 0 and 100 to status in lenv to represent the percentage completed of the running Service task, we will talk deeper about this later in this workshop."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:56
# 81812ba9808946038a6b092f557bf3f5
msgid "Please take a look to your local file ``main.cfg`` file. Three important parameters are commented bellow:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:58
# ed9587efb2094b44ae43b4965c60e240
msgid "serverAddress : The url to access to the ZOO Kernel"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:59
# e8eda171093a4136bd14f8dfe0d67c35
msgid "tmpPath : The full path to store temporary files"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:60
# a95f351c81a6445c9226dd8e9d779583
msgid "tmpUrl : The url path relative to serverAddress to access temporary directory."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:62
# 43e99aed11c04e51bbb7eb1fead8e059
msgid "The values of the main.cfg file used from the running virtual machine are the following :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:70
# b1dce1be045247ddb3ece75041a2115a
msgid "You could have noticed that the tmpUrl is a relative url from ``serverAddress``, so it must be a directory. Even if ZOO Kernel can be used with the full url of the ``zoo_loader.cgi`` script, for better readability and fully functional ZOO Kernel, you have to modify the default Apache configuration in order to be able to use the http://localhost/zoo/ url directly."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:76
# 86b5d95925534f2abed96b92068c9869
msgid "First, please create a ``zoo`` directory in the existing ``/var/www`` which is used by Apache as the ``DocumentRoot``. Then, please edit the ``/etc/apache2/sites-available/default`` configuration file and add the following lines after the ``Directory`` block related to ``/var/www`` directory :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:89
# 1ff815f757894eb0b1e0e51fff6bf4f9
msgid "Now create a small ``.htaccess`` file in the ``/var/www/zoo`` containing the following lines:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:98
# b515401162324ab6b6d3aa8cc7a3862a
msgid "For this last file to be taken into account by Apache, you must activate the rewrite Apache module by copying a load file as bellow :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:105
# 94d04f7e692846bead591d47264b867e
msgid "Or using the ``a2enmod`` tool this way :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:111
# 7ded29147f36444e80d78c997f457418
msgid "Now you should be able to access the ZOO Kernel using a simplified by restarting your Apache Web server :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:118
# 90aaffe0ac3847f19cc8bf552ea1905c
msgid "Two other softwares form the OSGeoLive environment will be used during this workshop. MapServer will first be used to provide WFS input data for the ZOO Services we are going to develop. The MapServer dataset providen by Orkney (japanese regions polygons) will be passed to our service during `section 4 <http://zoo-project.org/trac/wiki/ZooWorkshop/FOSS4GJapan/CreatingOGRBasedWebServices#CallingthesinglegeometryservicesfromJavaScript>`__."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:123
# 2d4c1c6abbcd4b15b45ac09131cd0315
msgid "OpenLayers library is also available on the OSGeoLive virtual machine image disk, and it will be used during `section 4 <http://zoo-project.org/trac/wiki/ZooWorkshop/FOSS4GJapan/CreatingOGRBasedWebServices#CallingthesinglegeometryservicesfromJavaScript>`__, for building a simple WPS client application able to query the newly developed ZOO Services."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:126
# fe61fdc08bda477797c4673d592f8923
msgid "As we planned to use OGR C-API and Python module of the GDAL library, we will need the corresponding header files, libraries and associated files. Hopefully everything was already available per default and so ready to use on the OSGeoLive packaging."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:131
# 19947377961842239d0e9bc34b677239
msgid "Testing the ZOO installation with GetCapabilities"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:134
# 1730fd74b71a445e8f39fdc910447a42
msgid "You can now simply query ZOO Kernel using the following request from your Internet browser:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:136
# 0144cae38a284e6c97595a215ed4563d
msgid "http://localhost/cgi-bin/zoo_loader.cgi?Request=GetCapabilities&Service=WPS"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:138
# 67b8696f016c4aa59b766711c9dd7985
msgid "You should then get a valid Capabilities XML document, as the following :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:145
# cc5481d0d0c947d88eb157bb3a6ab9ce
msgid "Please note that no Process node is returned in the ProcessOfferings section, as no ZOO Service is available yet. You can also proceed to a GetCapabilities request from the command line, using the following command:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:154
# a6d00447d6a143daaa0c757871805641
msgid "The same result as in your browser will be returned, as shown in the following screenshot:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:161
# c284070bb3894247aec4aaec10cb8157
msgid "Invoking ZOO Kernel from command line can be helpful during development process of new Services."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:164
# 389c0fc46f4c42239fe97d5e5a015690
msgid "Preparing your ZOO Services Provider directory"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:166
# 432f6b30f2dc45d7971b3f22d3d98066
msgid "In order to simplify the task, we will first comment the directory structure which should be used when creating a new Services Provider :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:169
# 13e740505807463fb3904699105e20c8
msgid "The main Services Provider directory including :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:171
# 950999865476492bb3feb4a5475b0487
msgid "A ``cgi-env`` directory which will contain all the zcfg metadata files and the service shared object (C Shared Library or Python module)"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:172
# 4277dd73d1cf45b59d5040a788afdb4e
msgid "The ``Makefile`` and the ``*c`` files needed to compile your Services Provider."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:174
# 9a7ba274246645e0bde7c79c8817c6f1
msgid "Please create a ws_sp main Services Provider directory in the existing zoo-services one located in ``/home/user/zoows/sources/``, respecting the tree above ."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:180
# 47557cb09f654901b7a0bb04315a8126
msgid "The Makefile and the code of the C and Python Service Shared Object will be detailed in the next sections."
msgstr ""

