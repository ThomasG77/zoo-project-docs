# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011, Nicolas Bozon, GÃ©rald Fenoy, Jeff McKenna
# This file is distributed under the same license as the ZOO Project package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ZOO Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-24 19:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../workshop/2010/introduction.txt:4
# 68408f8b3af04115a6f3242026c28b8a
msgid "Introduction"
msgstr ""

#: ../../workshop/2010/introduction.txt:0
# f831bd439fc740759e916f9e80806211
msgid "Table of Contents"
msgstr ""

#: ../../workshop/2010/introduction.txt:11
# 9169445e5f6e4266bc9da73f6ac765b0
msgid "What is ZOO ?"
msgstr ""

#: ../../workshop/2010/introduction.txt:13
# 92f44a8f5f734d3e84483fbb36dcf9ec
msgid "ZOO is a WPS (Web Processing Service) open source project recently released under a `MIT/X-11 <http://zoo-project.org/trac/wiki/Licence>`__ style license. It provides an OGC WPS compliant developer-friendly framework to create and chain WPS Web services. ZOO is made of three parts:"
msgstr ""

#: ../../workshop/2010/introduction.txt:15
# 0003b5b0949341f9ac6adeb9c25ab624
msgid "`ZOO Kernel <http://zoo-project.org/trac/wiki/ZooWebSite/ZooKernel/Introduction>`__ : A powerful server-side C Kernel which makes it possible to manage and chain Web services coded in different programming languages."
msgstr ""

#: ../../workshop/2010/introduction.txt:16
# 83c31da6ad974198b2b73d9a2775f810
msgid "`ZOO Services <http://zoo-project.org/trac/wiki/ZooWebSite/ZooServices/Introduction>`__ : A growing suite of example Web Services based on various open source libraries."
msgstr ""

#: ../../workshop/2010/introduction.txt:17
# d971e70031b1407bb36f7d8090f68735
msgid "`ZOO API <http://zoo-project.org/trac/wiki/ZooWebSite/ZOOAPI/Introduction>`__ : A server-side JavaScript API able to call and chain the ZOO Services, which makes the development and chaining processes easier."
msgstr ""

#: ../../workshop/2010/introduction.txt:19
# a43a718968a04a1aa5ca2cbe7960786e
msgid "ZOO is designed to make the service development easier by providing a powerful system able to understand and execute WPS compliant queries. It supports several programming languages, thus allowing you to create Web Services in your favorite one and from an already existing code. Further information on the project is available on the `ZOO Project official website <http://www.zoo-project.org/>`__ ."
msgstr ""

#: ../../workshop/2010/introduction.txt:26
# d90279ad03c340cb91bcd44a78fefe78
msgid "How does ZOO works ?"
msgstr ""

#: ../../workshop/2010/introduction.txt:28
# 0ad025d7341c4400b816c45f2872eef9
msgid "ZOO is based on a 'WPS Service Kernel' which constitutes the ZOO's core system (aka ZOO Kernel). The latter is able to load dynamic libraries and to handle them as on-demand Web services. The ZOO Kernel is written in C language, but supports several common programming languages for creating ZOO Services."
msgstr ""

#: ../../workshop/2010/introduction.txt:33
# 84ca220b45c14acd88ef911dd8c1db39
msgid "A ZOO Service is a link composed of a ZOO metadata file (.zcfg) and the code for the corresponding implementation. The metadata file describes all the available functions which can be called using a WPS Exec Request, as well as the desired input/output. Services contain the algorithms and functions, and can now be implemented in C/C++, Fortran, Java, Python, Perl, PHP and JavaScript."
msgstr ""

#: ../../workshop/2010/introduction.txt:39
# 79b6ce01f2364c4eaf90caf8a7a5c5e2
msgid "ZOO Kernel works with Apache and can communicate with cartographic engines and Web mapping clients. It simply adds the WPS support to your spatial data infrastructure and your Web mapping application. It can use every GDAL/OGR supported formats as input data and create suitable vector or raster output for your cartographic engine and/or your web-mapping client application."
msgstr ""

#: ../../workshop/2010/introduction.txt:46
# 139b56cd75ec41a19d9f4547d8a4629f
msgid "What are we going to do in this workshop?"
msgstr ""

#: ../../workshop/2010/introduction.txt:48
# 949c1cba0ea24004a66b04ee53470451
msgid "This workshop aims to present the ZOO Project and its features, and to explain its capabilities regarding the  `OGC WPS 1.0.0 specification <http://www.opengeospatial.org/standards/wps>`__. The participants will learn in 3 hours how to use ZOO Kernel, how to create ZOO Services and their configuration files and finally how to link the created Service with a client-side webmapping application. A pre-compiled ZOO 1.0 version is provided inside OSGeoLive, the OSGeo official Live DVD. For the sack of simplicity, an OSGeoLive Virtual Machine image disk is already installed on your computers. This will be used during this workshop, so the participants won't have to compile and install ZOO Kernel manually. Running and testing ZOO Kernel from this OSGeoLive image disk is thus the first step of the workshop, and every participants should get a working ZOO Kernel in less than 30 minutes."
msgstr ""

#: ../../workshop/2010/introduction.txt:60
# 6365f1c57cc644e09666332d8160155b
msgid "Once ZOO Kernel will be tested from a Web browser using GetCapabilities requests, participants will be invited to create an OGR based ZOO Service Provider aiming to enable simple spatial operations on vector data. Participants will first have to choose whether they will create the service using C or Python language. Every programming step of the ZOO Service Provider and the related Services will be each time detailed in C and Python. Once the ZOO Services will be ready and callable by ZOO Kernel, participants will finally learn how to use its different functions from an  OpenLayers simple application. A sample dataset was providen by Orkney and included in the OSGeoLiveDVD, data are available trough OGC WMS/WFS WebServices using  MapServer and will be displayed on a simple map and used as input data by the ZOO Services. Then, some specific selection and execution controls will be added in the JavaScript code in order to execute single and multiple geometries on the displayed polygons."
msgstr ""

#: ../../workshop/2010/introduction.txt:73
# 87788b7737e540f7895e2e1e017b7cfc
msgid "Once again, the whole procedure will be organized step-by-step and detailed with numerous code snippets and their respective explanations. The instructors will check the ZOO Kernel functioning on each machine and will assist you while coding. Technical questions are of course welcome during the workshop."
msgstr ""

#: ../../workshop/2010/introduction.txt:79
# 81be74d1929444508eb48c2d91b30561
msgid "Usefull tips for reading :"
msgstr ""

#: ../../workshop/2010/introduction.txt:85
# 3de72158782b4eff8b90dc4c72871f01
msgid "This is a warning message."
msgstr ""

#: ../../workshop/2010/introduction.txt:87
# fac240812cdd455aa54864485e8ae1f3
msgid "This is an important note."
msgstr ""

#: ../../workshop/2010/introduction.txt:92
# fa5779fd8cc549ffbcc7643e24010f63
msgid "**Let's go !**"
msgstr ""

