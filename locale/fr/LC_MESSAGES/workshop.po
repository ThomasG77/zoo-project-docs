# 
msgid ""
msgstr ""
"Project-Id-Version: ZOO Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-23 23:51+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../workshop/2010/building_wps_client_using_ol.txt:4
msgid "Building a WPS client using OpenLayers"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:0
#: ../../workshop/2010/introduction.txt:0
#: ../../workshop/2010/ogr_base_vect_ops.txt:0
#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:0
#: ../../workshop/2012/building_blocks_presentation.txt:0
#: ../../workshop/2012/first_service.txt:0
#: ../../workshop/2012/introduction.txt:0
#: ../../workshop/2012/js_services_chaining.txt:0
#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:0
#: ../../workshop/2013/building_blocks_presentation.txt:0
#: ../../workshop/2013/first_service.txt:0
#: ../../workshop/2013/introduction.txt:0
#: ../../workshop/2013/js_services_chaining.txt:0
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:0
msgid "Table of Contents"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:10
msgid ""
"The next step of our workshop is to connect to the OGR Services we have "
"created from an OpenLayers map. This will allow to apply single or multiple "
"geometries processes on user-selected polygons and to display the new "
"generated geometries."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:15
msgid "Creating a simple map showing the dataset as WMS"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:17
msgid ""
"OpenLayers is also included in OSGeoLive default distribution, so it is "
"convenient to use it for our needs. Please open ``/var/www/zoo-ogr.html`` "
"using your favorite text editor and paste the following HTML snippet:"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:38
msgid ""
"The following JavaScript code must then be added in a ``<script></script>`` "
"section within the ``<head>`` one. This will setup a map showing the "
"japanese regions data as WMS."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:72
msgid ""
"Once done, please save your HTML file as ``zoo-ogr.html`` in your workshop "
"directory, then copy it in ``/var/www`` and visualize it with your favorite "
"Web browser using this link : ``http://localhost/zoo-ogr.html``. You should "
"obtain a map centered on the Japan with the WMS layer activated."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:82
msgid "Fetching the data layer as WFS and adding selection controls"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:84
msgid ""
"Before accessing the displayed data via WFS, you first have to create new "
"vector layers dedicated to host the several interactions we are going to "
"create. Please add the following lines within the ``init()`` function, and "
"do not forget to add the newly created layer in the map.addLayers method:"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:108
msgid ""
"Then, you can now access the data by creating new controls to select "
"polygons, as the following. Please note that "
"``OpenLayers.Protocol.WFS.fromWMSLayer`` is used to access geometries and "
"that several state of selection are declared and append to the control "
"variable."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:136
msgid ""
"Please save your HTML file again. You should now be able to select a polygon"
" only by clicking on it. The selected polygon should appear in blue color."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:145
msgid "Calling the single geometry services from JavaScript"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:147
msgid ""
"Now that everything is setup, we can go on and call our OGR ZOO services "
"with JavaScript. Please add the following lines after the ``init()`` "
"function, which will call the single geometry processes. You can notice that"
" we use a specific ``parseMapServerId`` function which let us remove the "
"unecessary white space returned as fid value."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:193
msgid ""
"Then, some specific buttons must be added in the HTML, in order to be able "
"to call the different processes we just declared. You can add them on top of"
" the map by writing the following lines before the ``<div "
"id=\"map\"></div>``."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:218
msgid ""
"Save your HTML file again. You should now be able to select a polygon and to"
" launch a Buffer, ConvexHull, Boundary or Centroid on it by clicking one of "
"the button. The result of the process should appear as GeoJSON layer on the "
"map, in orange color."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:228
msgid "Calling the multiples geometries processes from JavaScript"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:230
msgid ""
"Using the same technique, you can now write a function dedicated to the "
"multiple geometries processes. Please add the following lines after the "
"``simpleProcessing()`` function, we will guide you during the exercise in "
"section 5 on how to create such a function."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:285
msgid ""
"Note that this time we didn't use the GET method to request the ZOO Kernel "
"but a XML POST. We did that because if you use the GET method you will get "
"error due to the HTTP GET method limitation based on the length of your "
"request. Using JSON string representing the geometry will make your request "
"longer."
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:290
msgid ""
"Once you get the functions to call your multiple geometries processes, you' "
"must add some buttons to fire the request call. Here is the HTML code to add"
" to your current ``zoo-ogr.html`` file :"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:311
msgid ""
"Please reload the page. You should then be able to run your multiple "
"geometries services and you should get results displayed in red as shown by "
"the following screenshots :"
msgstr ""

#: ../../workshop/2010/building_wps_client_using_ol.txt:328
msgid ""
"It seems that something is missing in your Services Provider to get the same"
" results â€¦ The multiple geometries Services ! This is what we are going to "
"do together in the next section."
msgstr ""

#: ../../workshop/2010/exercise.txt:4
msgid "Exercise"
msgstr ""

#: ../../workshop/2010/exercise.txt:6
msgid ""
"You know everything now about writting zcfg matadata files and get short "
"pieces of code in ``service.c`` or ``ogr_service_provider.py`` depending if "
"you choosen C or Python programming language respectively."
msgstr ""

#: ../../workshop/2010/exercise.txt:10
msgid ""
"The goal of this exercise is to implement the following multiple geometries "
"services :"
msgstr ""

#: ../../workshop/2010/exercise.txt:12
msgid "Intersection"
msgstr ""

#: ../../workshop/2010/exercise.txt:13
msgid "Union"
msgstr ""

#: ../../workshop/2010/exercise.txt:14
msgid "Difference"
msgstr ""

#: ../../workshop/2010/exercise.txt:15
msgid "SymDifference"
msgstr ""

#: ../../workshop/2010/exercise.txt:18
msgid "C version"
msgstr ""

#: ../../workshop/2010/exercise.txt:20
msgid ""
"Your are now invited to edit the source.c file you have created during this "
"workshop to add the multiple geometries, using the following OGR C-API "
"functions :"
msgstr ""

#: ../../workshop/2010/exercise.txt:23
msgid ""
"`OGR_G_Intersection "
"<http://www.gdal.org/ogr/ogr__api_8h.html#5a271b5c7b72994120e7a6bbc7e7e5cb>`__"
" (OGRGeometryH, OGRGeometryH)"
msgstr ""

#: ../../workshop/2010/exercise.txt:24
msgid ""
"`OGR_G_Union "
"<http://www.gdal.org/ogr/ogr__api_8h.html#5a271b5c7b72994120e7a6bbc7e7e5cb>`__"
" (OGRGeometryH, OGRGeometryH)"
msgstr ""

#: ../../workshop/2010/exercise.txt:25
msgid ""
"`OGR_G_Difference "
"<http://www.gdal.org/ogr/ogr__api_8h.html#497977bec6ecd9dade7a9694f776be64>`__"
" (OGRGeometryH, OGRGeometryH)"
msgstr ""

#: ../../workshop/2010/exercise.txt:26
msgid ""
"`OGR_G_SymmetricDifference "
"<http://www.gdal.org/ogr/ogr__api_8h.html#d6dacf495617a230c6f19950bc415f17>`__"
" (OGRGeometryH, OGRGeometryH)"
msgstr ""

#: ../../workshop/2010/exercise.txt:28
msgid ""
"You can use the ``Boundary.zcfg`` file as example, rename the InputPolygon "
"input to ``InputEntity1`` and add a similar input named ``IntputEntity2``. "
"You are invited to update other values in the ZOO Metadata File to set the "
"proper metadata informations."
msgstr ""

#: ../../workshop/2010/exercise.txt:34
#: ../../workshop/2010/ogr_base_vect_ops.txt:579
#: ../../workshop/2010/ogr_base_vect_ops.txt:1021
#: ../../workshop/2010/ogr_base_vect_ops.txt:1225
msgid "Python Version"
msgstr ""

#: ../../workshop/2010/exercise.txt:36
msgid ""
"Your are invited to edit the ``ogr_ws_service_provider.py`` file you created"
" during this workshop to add the multiple geometries using the following "
"``osgeo.ogr`` Geometry methods applied on the first Geometry instance :"
msgstr ""

#: ../../workshop/2010/exercise.txt:40
msgid "Intersection(Geometry)"
msgstr ""

#: ../../workshop/2010/exercise.txt:41
msgid "Union(Geometry)"
msgstr ""

#: ../../workshop/2010/exercise.txt:42
msgid "Difference(Geometry)"
msgstr ""

#: ../../workshop/2010/exercise.txt:43
msgid "SymmetricDifference(Geometry)"
msgstr ""

#: ../../workshop/2010/exercise.txt:45
msgid ""
"You can once again use the ``Boundary.zcfg`` file as example, rename the "
"``InputPolygon`` input to ``InputEntity1`` and add a similar input named "
"``IntputEntity2``. You are invited to update other values in the ZOO "
"metadata file to set the proper metadata informations."
msgstr ""

#: ../../workshop/2010/exercise.txt:51
msgid "Testing your services"
msgstr ""

#: ../../workshop/2010/exercise.txt:53
msgid ""
"Once the multiple geometries Services are deployed on your local "
"environment, please reload the ``zoo-ogr.html`` file created during the "
"previous section from your browser and test your brand new ZOO Services."
msgstr ""

#: ../../workshop/2010/index.txt:5
msgid "Workshop: Practical Introduction to ZOO: The Open WPS Platform"
msgstr ""

#: ../../workshop/2010/index.txt:7
msgid "Nicolas Bozon, GÃ©rald Fenoy"
msgstr ""

#: ../../workshop/2010/index.txt:8
msgid "$Date: 2011-12-07 14:19:47 +0100 (Wed, 07 Dec 2011) $"
msgstr ""

#: ../../workshop/2010/index.txt:12
msgid "FOSS4G 2010 Osaka / Tokyo / Beijing"
msgstr ""

#: ../../workshop/2010/index.txt:24 ../../workshop/2012/index.txt:19
#: ../../workshop/2013/index.txt:29
msgid "Sponsored By"
msgstr ""

#: ../../workshop/2010/index.txt:57
msgid "Special Thanks To Our Knowledge Partners"
msgstr ""

#: ../../workshop/2010/index.txt:99
msgid "Workshop Table of Contents"
msgstr ""

#: ../../workshop/2010/introduction.txt:4
#: ../../workshop/2010/ogr_base_vect_ops.txt:11
#: ../../workshop/2012/building_blocks_presentation.txt:12
#: ../../workshop/2012/first_service.txt:12
#: ../../workshop/2012/introduction.txt:5
#: ../../workshop/2012/js_services_chaining.txt:12
#: ../../workshop/2013/building_blocks_presentation.txt:12
#: ../../workshop/2013/first_service.txt:12
#: ../../workshop/2013/introduction.txt:5
#: ../../workshop/2013/js_services_chaining.txt:12
msgid "Introduction"
msgstr ""

#: ../../workshop/2010/introduction.txt:11
#: ../../workshop/2012/introduction.txt:12
#: ../../workshop/2013/introduction.txt:12
msgid "What is ZOO ?"
msgstr ""

#: ../../workshop/2010/introduction.txt:13
msgid ""
"ZOO is a WPS (Web Processing Service) open source project recently released "
"under a `MIT/X-11 <http://zoo-project.org/trac/wiki/Licence>`__ style "
"license. It provides an OGC WPS compliant developer-friendly framework to "
"create and chain WPS Web services. ZOO is made of three parts:"
msgstr ""

#: ../../workshop/2010/introduction.txt:15
msgid ""
"`ZOO Kernel <http://zoo-"
"project.org/trac/wiki/ZooWebSite/ZooKernel/Introduction>`__ : A powerful "
"server-side C Kernel which makes it possible to manage and chain Web "
"services coded in different programming languages."
msgstr ""

#: ../../workshop/2010/introduction.txt:16
msgid ""
"`ZOO Services <http://zoo-"
"project.org/trac/wiki/ZooWebSite/ZooServices/Introduction>`__ : A growing "
"suite of example Web Services based on various open source libraries."
msgstr ""

#: ../../workshop/2010/introduction.txt:17
msgid ""
"`ZOO API <http://zoo-"
"project.org/trac/wiki/ZooWebSite/ZOOAPI/Introduction>`__ : A server-side "
"JavaScript API able to call and chain the ZOO Services, which makes the "
"development and chaining processes easier."
msgstr ""

#: ../../workshop/2010/introduction.txt:19
msgid ""
"ZOO is designed to make the service development easier by providing a "
"powerful system able to understand and execute WPS compliant queries. It "
"supports several programming languages, thus allowing you to create Web "
"Services in your favorite one and from an already existing code. Further "
"information on the project is available on the `ZOO Project official website"
" <http://www.zoo-project.org/>`__ ."
msgstr ""

#: ../../workshop/2010/introduction.txt:26
#: ../../workshop/2012/introduction.txt:34
#: ../../workshop/2013/introduction.txt:34
msgid "How does ZOO works ?"
msgstr ""

#: ../../workshop/2010/introduction.txt:28
msgid ""
"ZOO is based on a 'WPS Service Kernel' which constitutes the ZOO's core "
"system (aka ZOO Kernel). The latter is able to load dynamic libraries and to"
" handle them as on-demand Web services. The ZOO Kernel is written in C "
"language, but supports several common programming languages for creating ZOO"
" Services."
msgstr ""

#: ../../workshop/2010/introduction.txt:33
msgid ""
"A ZOO Service is a link composed of a ZOO metadata file (.zcfg) and the code"
" for the corresponding implementation. The metadata file describes all the "
"available functions which can be called using a WPS Exec Request, as well as"
" the desired input/output. Services contain the algorithms and functions, "
"and can now be implemented in C/C++, Fortran, Java, Python, Perl, PHP and "
"JavaScript."
msgstr ""

#: ../../workshop/2010/introduction.txt:39
msgid ""
"ZOO Kernel works with Apache and can communicate with cartographic engines "
"and Web mapping clients. It simply adds the WPS support to your spatial data"
" infrastructure and your Web mapping application. It can use every GDAL/OGR "
"supported formats as input data and create suitable vector or raster output "
"for your cartographic engine and/or your web-mapping client application."
msgstr ""

#: ../../workshop/2010/introduction.txt:46
#: ../../workshop/2012/introduction.txt:43
#: ../../workshop/2013/introduction.txt:43
msgid "What are we going to do in this workshop?"
msgstr ""

#: ../../workshop/2010/introduction.txt:48
msgid ""
"This workshop aims to present the ZOO Project and its features, and to "
"explain its capabilities regarding the  `OGC WPS 1.0.0 specification "
"<http://www.opengeospatial.org/standards/wps>`__. The participants will "
"learn in 3 hours how to use ZOO Kernel, how to create ZOO Services and their"
" configuration files and finally how to link the created Service with a "
"client-side webmapping application. A pre-compiled ZOO 1.0 version is "
"provided inside OSGeoLive, the OSGeo official Live DVD. For the sack of "
"simplicity, an OSGeoLive Virtual Machine image disk is already installed on "
"your computers. This will be used during this workshop, so the participants "
"won't have to compile and install ZOO Kernel manually. Running and testing "
"ZOO Kernel from this OSGeoLive image disk is thus the first step of the "
"workshop, and every participants should get a working ZOO Kernel in less "
"than 30 minutes."
msgstr ""

#: ../../workshop/2010/introduction.txt:60
msgid ""
"Once ZOO Kernel will be tested from a Web browser using GetCapabilities "
"requests, participants will be invited to create an OGR based ZOO Service "
"Provider aiming to enable simple spatial operations on vector data. "
"Participants will first have to choose whether they will create the service "
"using C or Python language. Every programming step of the ZOO Service "
"Provider and the related Services will be each time detailed in C and "
"Python. Once the ZOO Services will be ready and callable by ZOO Kernel, "
"participants will finally learn how to use its different functions from an  "
"OpenLayers simple application. A sample dataset was providen by Orkney and "
"included in the OSGeoLiveDVD, data are available trough OGC WMS/WFS "
"WebServices using  MapServer and will be displayed on a simple map and used "
"as input data by the ZOO Services. Then, some specific selection and "
"execution controls will be added in the JavaScript code in order to execute "
"single and multiple geometries on the displayed polygons."
msgstr ""

#: ../../workshop/2010/introduction.txt:73
msgid ""
"Once again, the whole procedure will be organized step-by-step and detailed "
"with numerous code snippets and their respective explanations. The "
"instructors will check the ZOO Kernel functioning on each machine and will "
"assist you while coding. Technical questions are of course welcome during "
"the workshop."
msgstr ""

#: ../../workshop/2010/introduction.txt:79
msgid "Usefull tips for reading :"
msgstr ""

#: ../../workshop/2010/introduction.txt:85
#: ../../workshop/2012/introduction.txt:56
#: ../../workshop/2013/introduction.txt:56
msgid "This is a warning message."
msgstr ""

#: ../../workshop/2010/introduction.txt:87
#: ../../workshop/2012/introduction.txt:58
#: ../../workshop/2013/introduction.txt:58
msgid "This is an important note."
msgstr ""

#: ../../workshop/2010/introduction.txt:92
#: ../../workshop/2012/introduction.txt:60
#: ../../workshop/2013/introduction.txt:60
msgid "**Let's go !**"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:4
msgid "Creating OGR based Web Services"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:13
msgid ""
"In this part, we are going to create a ZOO ServicesProvider containing "
"several Services based on the OGR C API or on the OGR Python module, which "
"have also been placed in the ZOO installation on OSGeoLive. The intended "
"goal is to use OGR and its GEOS based simple spatial functions as WPS "
"Services."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:18
msgid ""
"We will first start with the Boundary spatial function, which will be "
"explained, codded and tested gradually as a ZOO Service. The same procedure "
"will then be used to enable the Buffer, Centroid and Convex Hull functions. "
"Once done, some multiple geometries processes such as Intersection, Union, "
"Difference and Symetric Difference will be implemented through an `exercise "
"<./exercise.html>`__ at the end of the workshop."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:24
msgid ""
"As already said in the introduction, you have the choice to code your "
"service in C or Python (or both!) during this workshop. Explanations will be"
" based on the C part, but will be very helpful for those who will choose "
"Python. Please decide according to your habits and preferences and tell your"
" choice to the instructors. The results will be the same in both case."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:31
msgid "Preparing ZOO metadata file"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:33
msgid ""
"A ZOO Service is a combination of a ZOO metadata file (``.zcfg``) and the "
"runtime module for the corresponding implementation, which is commonly "
"called ZOO Service Provider. We will first prepare a ``.zcfg`` file step-by-"
"step. Please open your preferred text editor and edit a file named "
"``Boundary.zcfg`` in your ``/home/user/zoows/sources/zoo-services/ws_sp`` "
"directory. First, you need to name the service between brackets at the top "
"of the file, as the following"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:44
msgid ""
"This name is very important, it is the name of the Service and so the name "
"of the function defined in the Services Provider. A title and a brief "
"abstract must then be added to inform clients on what the service can do:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:53
msgid ""
"Such metadata informations will be returned by a GetCapabilities request."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:55
msgid ""
"You can also add other specific informations like the ``processVersion``. "
"You can set if your ZOO Service can store its results, by setting the "
"``storeSupported`` parameter to true or false. You can also decide if the "
"function can be run as a background task and inform on its current status, "
"according to the ``statusSupported`` value :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:66
msgid ""
"In the main section of the ZOO Service metadata file, you must also specify "
"two important things:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:68
msgid ""
"``serviceProvider``, which is the name of the C shared library containing "
"the Service function or the Python module name."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:69
msgid ""
"``serviceType``, which defines the programming language to be used for the "
"Service. (value can be C or Python depending on what language you have "
"decided to use)"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:71
msgid "C ServicesProvider Example :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:78
msgid ""
"In this case you will get an ``ogr_ws_service_provider.zo`` shared library "
"containing the Boundary function, placed in the same directory than ZOO "
"Kernel."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:81
msgid "Python ServicesProvider Example :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:88
msgid ""
"In this case, you will get an ``ogr_ws_service_provider.py`` file containing"
" the Python code of your Boundary function."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:90
msgid ""
"In the main section you can also add any other metadata information, as the "
"following:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:98
msgid ""
"The main metadata informations have been declared, so you can now define "
"data input which will be used by the ZOO Service. You can define any input "
"needed by the Service. Please note that you can request ZOO Kernel using "
"more data input than defined in the ``.zcfg`` file without any problem, "
"those values will be passed to your service without filtering. In the "
"Boundary Service example, a single polygon will be used as input, the one on"
" which to apply the Boundary function."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:105
msgid ""
"The data input declarations are included in a DataInputs block. They use the"
" same syntax as the Service itself and the input name is between brackets. "
"You can also fill a title, an abstract and a MetaData section for the input."
" You must set values for the ``minOccurs`` and ``maxOccurs`` parameters, as "
"they will inform ZOO Kernel which parameters are required to be able to run "
"the Service function."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:123
msgid ""
"The metadata defines what type of data the Service supports. In the Boundary"
" example, the input polygon can be provided as a GML file or as a JSON "
"string. Next step is thus to define the default and supported input formats."
" Both formats should be declared in a LitteralData or ComplexData block "
"depending on their types. For this first example we will use ComplexData "
"blocks only."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:143
msgid ""
"Then, the same metadata information must be defined for the output of the "
"Service, inside a DataOutputs block, as the following:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:164
msgid ""
"A complete copy of this ``.zcfg`` file can be found at the following URL: "
"http://zoo-project.org/trac/browser/trunk/zoo-services/ogr/base-vect-ops"
"/cgi-env/Boundary.zcfg."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:167
msgid ""
"Once the ZOO metadata file is modified, you have to copy it in the same "
"directory than your ZOO Kernel (so in your case ``/usr/lib/cgi-bin``). Then "
"you should be able to run the following request :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:171
msgid ""
"http://localhost/zoo/?Request=DescribeProcess&Service=WPS&Identifier=Boundary&version=1.0.0"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:173
msgid ""
"The returned ProcessDescriptions XML document should look like the following"
" :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:180
msgid ""
"Please note that the GetCapabilities and DescribeProcess only need a "
"``.zcfg`` file to be completed. Simple, isn't it ? At this step, if you "
"request ZOO Kernel for an Execute, you will get an ExceptionReport document "
"as response, looking as the following :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:189
msgid ""
"A similar error message will be returned if you try to run your Python "
"Service :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:198
msgid "Implementing single geometry services"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:200
msgid ""
"In order to learn the Services Provider creation and deployement step-by-"
"step, we will first focus on creating a very simple one dedicated to the "
"Boundary function. Similar procedure will then be used for the Buffer, "
"Centroid and ConvexHull implementation."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:204
msgid ""
"Your metadata is now ok, so you now must create the code of your Service. "
"The most important thing you must be aware of when coding ZOO Services is "
"that the function corresponding to your Service takes three parameters "
"(internal maps datatype or `Python dictionaries  "
"<http://docs.python.org/tutorial/datastructures.html#dictionaries>`__) and "
"returns an integer value representing the status of execution "
"(SERVICE_FAILED or SERVICE_SUCCEEDED):"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:210
msgid ""
"``conf`` : The main environment configuration (corresponding to the "
"``main.cfg`` content)"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:211
msgid "``inputs`` : The requested / default inputs"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:212
msgid "``outputs`` : The requested / default outputs"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:215
msgid "Boundary"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:218
#: ../../workshop/2010/ogr_base_vect_ops.txt:887
#: ../../workshop/2010/ogr_base_vect_ops.txt:1117
msgid "C Version"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:220
msgid ""
"As explained before, ZOO Kernel will pass the parameters to your Service "
"function in a specific datatype called maps. In order to code your Service "
"in C language, you also need to learn how to access this datatype in "
"read/write mode."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:224
msgid ""
"The maps are simple map named linked list containing a name, a content map "
"and a pointer to the next map in the list (or NULL if there is no more map "
"in the list). Here is the datatype definition as you can find in the zoo-"
"kernel/service.h file:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:236
msgid ""
"The map included in the maps is also a simple linked list and is used to "
"store Key Value Pair values. A map is thus a couple of name and value and a "
"pointer to the next map in the list. Here is the datatype definition you can"
" find in the zoo-kernel/service.h file:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:249
msgid ""
"As partially or fully filled datastructures will be passed by the ZOO Kernel"
" to your Services, this means that you do not need to deal with maps "
"creation but directly with existing map, in other words the content of each "
"maps. The first function you need to know is getMapFromMaps (defined in the "
"zoo-kernel/service.h file) which let you access to a specific map of a maps."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:255
msgid "This function takes three parameters listed bellow:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:257
msgid ""
"``m`` : a maps pointer representing the maps used to search the specific map"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:258
msgid ""
"``name`` : a char* representing the name of the map you are searching for"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:259
msgid "``key`` : a specific key in the map named name"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:261
msgid ""
"For example, the following syntax will be used to access the InputPolygon "
"value map of a maps named inputs, your C code should be:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:268
msgid ""
"Once you get the map, you can access the name or the value fields, using the"
" following syntax :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:275
msgid ""
"As you know how to read and access the map fields from a maps, you can now "
"learn how to write in such a datastructure. This is done by using the simple"
" setMapInMaps function once again defined in zoo-kernel/service.h. The "
"setMapInMaps function takes four parameters :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:279
msgid "``m`` : a maps pointer you want to update,"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:280
msgid "``ns`` : the name of the maps you want you want to update,"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:281
#: ../../workshop/2010/ogr_base_vect_ops.txt:301
msgid "``n`` : the name of the map you want to add or update the value,"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:282
msgid "``v`` : the value you want to set for this map."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:284
msgid ""
"Here is an example of how to add or edit the values of some map in the "
"Result maps from outputs :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:293
msgid ""
"Please note that the setMapInMaps function is able to create or update an "
"existing map. Indeed, if a map called Â« value Â» allready exists, then its "
"value will be updated automatically."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:296
msgid ""
"Even if you will mainly use map from maps during this workshop, you can also"
" add or update values in a map directly using the addToMap function defined "
"in zoo-kernel/service.h. The addToMap function take three paramters :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:300
msgid "``m`` : a map pointer you want to update,"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:302
msgid "``v`` : the value you want to set in this map."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:304
msgid ""
"This datatype is really important cause it is used in every C based ZOO "
"Services. It is also the same representation used in other languages but "
"using their respectives datatypes. For Example in Python, the dictionaries "
"datatype is used, so manipulation is much easier."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:308
msgid ""
"Here is an example of the correspoding maps datatype used in Python language"
" (this is a summarized version of the main configaration maps):"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:328
msgid ""
"As you know how to deal with maps and map, you are ready to code the first "
"ZOO Service by using the OGR Boundary function."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:330
msgid ""
"As already said in introduction we will use the MapServer WFS server "
"available on OSGeoLive, so full WFS Response will be used as inputs values. "
"As we will use the simple OGR Geometry functions like  `OGR_G_GetBoundary "
"<http://www.gdal.org/ogr/ogr__api_8h.html#a797af4266c02846d52b9cf3207ef958>`__,"
" only the Geometry object will be used rather than a full WFS Response. The "
"first thing to do is to write a function which will extract the geometry "
"definition from the full WFS Response. We will call it "
"createGeometryFromWFS."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:337
msgid "Here is the code of such a function:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:377
msgid ""
"The only thing we will focus on is the call to the errorException function "
"used in the function body. This function is declared in the zoo-"
"kernel/service_internal.h and defined in zoo-kernel/service_internal.c file."
" It takes three parameters as follow:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:381
msgid "the main environment maps,"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:382
msgid "a char* representing the error message to display,"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:383
msgid ""
"a char* representing the error code (as defined in the WPS specification â€“ "
"Table 62)."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:385
msgid ""
"In other words, if the WFS response cannot be parsed properly, then you will"
" return an ExceptionReport document informing the client that a problem "
"occured."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:388
msgid ""
"The function to extract the geometry object from a WFS Response is written, "
"so you can now start defining the Boundary Service. Here is the full code "
"for the Boundary Service:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:428
msgid ""
"As you can see in the code above, the mimeType of the data inputs passed to "
"our Service is first checked:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:438
msgid ""
"Basically, if we get an input with a mimeType set to application/json, then "
"we will use our ``OGR_G_CreateGeometryFromJson`` in other case, our "
"``createGeometryFromWFS`` local function."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:441
msgid ""
"Please note that in some sense the data inputs are not really of the same "
"kind. Indeed as we used directly ``OGR_G_CreateGeometryFromJson`` it means "
"that the JSON string include only the geometry object and not the full "
"GeoJSON string. Nevertheless, you can easily change this code to be able to "
"use a full GeoJSON string, simply by creating a function which will extract "
"the geometry object from the GeoJSON string (using the json-c library for "
"instance, which is also used by the OGR GeoJSON Driver)."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:448
msgid ""
"Once you can access the input geometry object, you can use the  "
"``OGR_G_GetBoundary`` function and store the result in the res geometry "
"variable. Then, you only have to store the value in the right format : "
"GeoJSON per default or GML as we declared it as a supported output format."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:452
msgid ""
"Please note that ZOO Kernel will give you pre-filled outputs values, so you "
"will only have to fill the value for the key named value, even if in our "
"example we override the mimeType using the text/plain value rather than the "
"application/json (to show that we can also edit other fields of a map). "
"Indeed, depending on the format requested by the client (or the default one)"
" we will provide JSON or GML representation of the geometry."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:473
msgid ""
"The Boundary ZOO Service is now implemented and you need to compile it to "
"produce a Shared Library. As you just used functions defined in service.h "
"(``getMapFromMaps``, ``setMapInMaps`` and ``addToMap``), you must include "
"this file in your C code. The same requirement is needed to be able to use "
"the ``errorException`` function declared in ``zoo-"
"kernel/service_internal.h``, you also must link your service object file to "
"the ``zoo-kernel/service_internal.o`` in order to use ``errorException`` on "
"runtime. You must then include the required files to access the libxml2 and "
"OGR C-API."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:481
msgid ""
"For the need of the Shared Library, you have to put your code in a block "
"declared as extern \"C\". The final Service code should be stored in a "
"service.c file located in the root of the Services Provider directory (so in"
" ``/home/zoows/sources/zoo-services/ws_sp``). It should look like this:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:498
msgid ""
"The full source code of your Service is now ready and you must produce the "
"corresponding Service Shared Object by compiling the code as a Shared "
"Library. This can be done using the following command:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:505
msgid ""
"Please note that the ``CFLAGS`` and ``LDFLAGS`` environment variables values"
" must be set before."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:507
msgid ""
"The ``CFLAGS`` must contain all the requested paths to find included "
"headers, so the path to the directories where the ``ogr_api.h``, ``libxml2``"
" directory, ``service.h`` and ``service_internal.h`` files are located. "
"Thanks to the OSGeoLive environment, some of the provided tools can be used "
"to retrieve those values : ``xml2-config`` and ``gdal-config``, both used "
"with the ``--cflags`` argument. They will produce the desired paths for you."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:513
msgid ""
"If you follow the instructions to create your ZOO Services Provider main "
"directory in ``zoo-services``, then you should find the ZOO Kernel headers "
"and source tree which is located in the ``../../zoo-kernel`` directory "
"relatively to your current path (``/home/user/zoows/sources/zoo-"
"services/ws_sp``). Note that you can also use a full path to the ``zoo-"
"kernel`` directory but using relative path will let you move your sources "
"tree somewhere else and keep your code compiling using exactly the same "
"command line. So you must add a ``-I../../zoo-kernel`` to your ``CFLAGS`` to"
" make the compiler able to find the ``service.h`` and ``service_internal.h``"
" files."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:521
msgid "The full ``CFLAGS`` definition should look like this:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:527
msgid ""
"Once you get the included paths correctly set in your ``CFLAGS`` , it is "
"time to concentrate on the library we have to link against (defined in the "
"``LDFLAGS`` environment variable). In order to link against the gdal and "
"libxml2 libraries, you can use the same tools than above using the "
"``--libs`` argument rather than ``--cflags``. The full ``LDFLAGS`` "
"definition must look like this :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:537
msgid ""
"Let's now create a ``Makefile`` which will help you compiling your code over"
" the time. Please write a short ``Makefile`` in the root of your ZOO "
"Services Provider directory, containing the following lines:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:552
msgid ""
"Using this ``Makefile``, you should be able to run ``make`` from your ZOO "
"Service Provider main directory and to get the resulting "
"``ogr_ws_service_provider.zo`` file located in the ``cgi-env`` directory."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:555
msgid ""
"The metadata file and the ZOO Service Shared Object are now both located in "
"the ``cgi-env`` directory. In order to deploy your new ServicesProvider, you"
" only have to copy the ZOO Service Shared Object and its corresponding "
"metadata file in the directory where ZOO Kernel is located, so in ``/usr/lib"
"/cgi-bin``. You must use a ``sudo`` command to achieve this task:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:564
msgid ""
"You should now understand more clearly the meannings of the ZOO Service "
"Provider source tree ! The ``cgi-env`` directory will let you deploy your "
"new Services or Services Provider in an easy way , simply by copying the "
"whole cgi-env content in your ``cgi-bin`` directory."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:568
msgid ""
"Please note that you can add the following lines to your ``Makefile`` to be "
"able to type ``make install`` directly and to get your new Services Provider"
" available for use from ZOO Kernel:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:576
msgid ""
"Your ZOO Services Provider is now ready to use from an Execute request "
"passed to ZOO Kernel."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:581
msgid ""
"For those using Python to implement their ZOO Services Provider, the full "
"code to copy in ``ogr_ws_service_provider.py`` in ``cgi-env`` directory is "
"shown bellow. Indeed, as Python is an interpreted language, you do not have "
"to compile anything before deploying your service which makes the "
"deployement step much easier:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:616
msgid ""
"We do not dicuss the functions body here as we already gave all the details "
"before and the code was volontary made in a similar way."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:619
msgid ""
"As done before, you only have to copy the ``cgi-env`` files into your ``cgi-"
"bin`` directory:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:625
msgid ""
"A simple ``Makefile`` containing the install section can be written as the "
"following :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:632
msgid ""
"Finally, simply run make install from the ZOO Services Provider main "
"directory, in order to deploy your ZOO Service Provider."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:636
msgid "Testing the Service using Execute Request"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:638
msgid "**The simple and unreadable way**"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:640
msgid ""
"Everybody should now get his own copy of the OGR Boundary Service stored as "
"a ZOO Services Provider called ``ogr_ws_service_provider`` and deployed in "
"the ZOO Kernel tree, so the following Execute request can be used to test "
"the Service:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:644
msgid ""
"`link <http://localhost/cgi-"
"bin/zoo_loader.cgi?request=Execute&service=WPS&version=1.0.0&Identifier=Boundary&DataInputs=InputPolygon=Reference@xlink:href=http%3A%2F%2Flocalhost"
"%2Fcgi-"
"bin%2Fmapserv%3Fmap%3D%2Fvar%2Fwww%2Fwfs.map%26SERVICE%3DWFS%26REQUEST%3DGetFeature%26VERSION%3D1.0.0%26typename%3Dregions%26SRS%3DEPSG%3A4326%26FeatureID%3Dregions.3192>`__"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:650
msgid ""
"As you can see in the url above, we use an URLEncoded WFS request to the "
"MapServer WFS server available on OSGeoLive as a ``xlink:href`` key in the "
"DataInputs KVP value, and set the ``InputPolygon`` value to Reference. The "
"corresponding non encoded WFS request is as follow:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:658
msgid ""
"Please note that you can add ``lineage=true`` to the previous request if you"
" need to get information about the input values used to run your Service. "
"Furthermore, you may need to store the ExecuteResponse document of your ZOO "
"Service to re-use it later. In this case you must add "
"``storeExecuteResponse=true`` to the previous request. Note that is an "
"important thing as the behavior of ZOO Kernel is not exactly the same than "
"when running without this parameter settled to true. Indeed, in such a "
"request, ZOO Kernel will give you an ExecuteResponse document which will "
"contain the attribute statusLocation, which inform the client where the "
"ongoing status or the final ExecuteResponse will be located."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:668
msgid ""
"Here is an example of what the ExecuteResponse would look like in case "
"``storeExecuteResponse`` was set to true in the request:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:675
msgid ""
"Then, according to the statusLocation, you should get the ExecuteResponse as"
" you get before using the previous request. Note that can be really useful "
"to provide some caching system for a client application."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:679
msgid ""
"You didn't specify any ResponseForm in the previous request, it is not "
"requested and should return a ResponseDocument per default using the "
"application/json mimeType as you defined in you zcfg file. Nevertheless, you"
" can tell ZOO Kernel what kind of data you want to get in result of your "
"query adding the attribute ``mimeType=text/xml`` to your "
"``ResponseDocument`` parameter. Adding this parameter to the previous "
"request will give us the result as its GML representation :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:686
msgid ""
"`link <http://localhost/cgi-"
"bin/zoo_loader.cgi?request=Execute&service=WPS&version=1.0.0&Identifier=Boundary&DataInputs=InputPolygon=Reference@xlink:href=http%3A%2F%2Flocalhost"
"%2Fcgi-"
"bin%2Fmapserv%3Fmap%3D%2Fvar%2Fwww%2Fwfs.map%26SERVICE%3DWFS%26REQUEST%3DGetFeature%26VERSION%3D1.0.0%26typename%3Dregions%26SRS%3DEPSG%3A4326%26FeatureID%3Dregions.3192&ResponseDocument=Result@mimeType=text/xml>`__"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:692
msgid ""
"As defined by the WPS specifications, you can also ask for a "
"``RawDataOutput`` to get only the data without the full "
"``ResponseDocument``. To do that, you only have to replace the "
"``ResponseDocument`` of your request by ``RawDataOutput``, like in the "
"following request :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:697
msgid ""
"`link <http://localhost/cgi-"
"bin/zoo_loader.cgi?request=Execute&service=WPS&version=1.0.0&Identifier=Boundary&DataInputs=InputPolygon=Reference@xlink:href=http%3A%2F%2Flocalhost"
"%2Fcgi-"
"bin%2Fmapserv%3Fmap%3D%2Fvar%2Fwww%2Fwfs.map%26SERVICE%3DWFS%26REQUEST%3DGetFeature%26VERSION%3D1.0.0%26typename%3Dregions%26SRS%3DEPSG%3A4326%26FeatureID%3Dregions.3192&RawDataOutput=Result@mimeType=application/json>`__"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:703
msgid ""
"Please note that we go back to the default mimeType to directly obtain the "
"JSON string as we will use this kind of request to develop our client "
"application in the next section of this workshop."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:707
msgid ""
"Now, you know how to ask ZOO Kernel to run service in background, ask for "
"``RawDataOutput`` specifying ``mimeType`` or any specific format to be "
"returned by the Kernel. When you ask for ``ResponseDocument``, you can also "
"specify to the ZOO Kernel that you want the result to be stored on the "
"server side."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:712
msgid ""
"To do such a thing, you have to set the attribute ``asReference`` as true "
"and then the resulting ExecuteResponse will contain a Reference node "
"including the href attribute to let you access the produced file. To be able"
" to handle this, you have to add the extension parameter in your "
"``DataOutputs`` node in the corresponding ZCFG file."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:717
msgid "Here is a sample url which provide such a result:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:719
msgid ""
"`link <http://localhost/cgi-"
"bin/zoo_loader.cgi?request=Execute&service=WPS&version=1.0.0&Identifier=Boundary&DataInputs=InputPolygon=Reference@xlink:href=http%3A%2F%2Flocalhost"
"%2Fcgi-"
"bin%2Fmapserv%3Fmap%3D%2Fvar%2Fwww%2Fwfs.map%26SERVICE%3DWFS%26REQUEST%3DGetFeature%26VERSION%3D1.0.0%26typename%3Dregions%26SRS%3DEPSG%3A4326%26FeatureID%3Dregions.3192&ResponseDocument=Result@mimeType=application/json@asReference=true>`__"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:725
msgid "You can see bellow what kind of result can be expected :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:732
msgid "**Simplification and readability of request**"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:734
msgid ""
"As you can see in the simple example we used since the begining of this "
"workshop, it is sometimes hard to write the Execute requests using the GET "
"method as it makes really long and complexe URLs. In the next requests "
"examples, we will thus use the POST XML requests. First , here is the XML "
"request corresponding to the previous Execute we used:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:762
msgid ""
"In order to let you easily run the XML requests, a simple HTML form called "
"``test_services.html`` is available in your ``/var/www`` directory. You can "
"access it using the following link :  http://localhost/test_services.html."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:766
msgid ""
"Please open this page in your browser, simply fill the XML request content "
"into the textarea field and click the Â« run using XML Request Â» submit "
"button. You will get exactly the same result as when running your Service "
"using the GET request. The screenshot above show the HTML form including the"
" request and the ExecuteResponse document displayed in the iframe at the "
"bottom of the page:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:777
msgid ""
"The xlink:href value is used in the simplest way to deal with such data "
"input. Obviously, you can also use a full JSON string of the geometry, as "
"shown in the following XML Request example :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:805
msgid ""
"If everything went well, you should get the Boundary of the JSON geometry "
"passed as argument, and so be sure that your Service support both GML and "
"JSON as input data. Note that in the previous request, we added a "
"``mimeType`` attribute to the ``ComplexData`` node to specify that the input"
" data is not in the default ``text/xml`` mimeType but passed as an "
"``application/json`` string directly. It is similar to add "
"``@mimeType=application/json`` as we discussed before."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:812
msgid "**storeExecuteResponse parameter and GetStatus Service**"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:814
msgid ""
"If you go in your local ``/home/user/zoows/sources/zoo-"
"services/utils/status``, you'll find the code for a ServiceProvider which "
"will provide the GetStatus service and the longProcess one. The last is a "
"simple example to learn how to use the status variable from lenv section of "
"the main configuration maps and the updateStatus function you have to call "
"to take your status value into account. The main service provider is the "
"GetStatus one, it is able to give you information about the current status "
"value from a service running in background mode."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:822
msgid ""
"You have to know that the ZOO Kernel will detect the presence of the "
"GetStatus service and if it is available it will then return the link the "
"corresponding Execute request."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:825
msgid ""
"So now you will deploy the GetStatus and longProcess service on your local "
"environment. As for each services, you shall be able to deploy the services "
"simply by copying the cgi-env directory into your Apache ``cgi-bin`` "
"directory. You can use the following command :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:833
msgid ""
"For simple Services it is the right way to deploy Service Providers. But in "
"this specific case you'll have also to add some special parameter in the "
"main section of you main configuration file and to copy an xsl file used to "
"replace on the fly in the ResponseDocument the percentCompleted attribute of"
" the ProcessStarted node returned by the GetStatus service."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:838
msgid ""
"So first edit you ``main.cfg`` file to add the following lines in your main "
"section :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:845
msgid ""
"Here you define the path where the service is able to find the xsl file, "
"specified in the dataPath parameter. You also tell the ZOO Kernel that you "
"want to use the rewriteUrl we defined in the previous section."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:849
msgid ""
"To finish your deployment, you'll have now to copy the xsl file in the "
"defined dataPath directory. You can use the following command :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:856
msgid "Now, if you run the following request to run the service longProcess :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:858
msgid ""
"http://localhost/zoo/?request=Execute&service=WPS&version=1.0.0&Identifier=longProcess&DataInputs=&storeExecuteResponse=true"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:860
msgid "You shall get the a XML document looking like the following:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:867
msgid ""
"If you poll the statusLocation url provider in the answer you'll then be "
"able to view the evolution of the percentCompleted attribute value growing, "
"like you can see in the following screenshot."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:875
msgid ""
"This won't be used during this workshop but can be useful for really time "
"consuming services."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:879
msgid "Creating Services for other functions (ConvexHull and Centroid)"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:881
msgid ""
"As the Boundary sample service code is available, you can now easily add "
"ConvexHull and Centroid functions as they take exactly the same number of "
"arguments : Only one geometry. The details for implementing and deploying "
"the ConvexHull Service are provided bellow, and we will let you do the same "
"thing for the Centroid one."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:889
msgid "Please add first the following code to the service.c source code :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:928
msgid ""
"This new code is exactly the same as for the Boundary Service. The only "
"thing we modified is the line where the  `OGR_G_ConvexHull "
"<http://www.gdal.org/ogr/ogr__api_8h.html#7a93026cfae8ee6ce25546dba1b2df7d>`__"
" function is called (rather than the OGR_G_GetBoundary you used before). It "
"is better to not copy and paste the whole function and find a more generic "
"way to define your new Services as the function body will be the same in "
"every case. The following generic function is proposed to make things "
"simpler:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:971
msgid ""
"Then, a function pointer called myFunc rather than the full function name "
"can be used. This way we can re-implement our Boundary Service this way:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:980
msgid ""
"Using this applyOne local function defined in the service.c source code, we "
"can define other Services this way:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:992
msgid ""
"The genericity of the applyOne function let you add two new Services in your"
" ZOO Services Provider : ConvexHull and Centroid."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:994
msgid ""
"Note that you should define MY_OGR_Centroid function before the Centroid one"
" as  `OGR_G_Centroid "
"<http://www.gdal.org/ogr/ogr__api_8h.html#23f5a19a81628af7f9cc59a37378cb2b>`__"
" don't return a geometry object but set the value to an already existing one"
" and support only Polygon as input, so to ensure we use the ConvexHull for "
"MultiPolygon. So please use the code bellow:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1009
msgid ""
"To deploy your Services, you only have to copy the ``Boundary.zcfg`` "
"metadata file from your cgi-env directory as ``ConvexHull.zcfg`` and "
"``Centroid.zcfg``. Then, you must rename the Service name on the first line "
"to be able to run and test the Execute request in the same way you did "
"before. You only have to set the Identifier value to ConvexHull or Centroid "
"in your request depending on the Service you want to run."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1015
msgid ""
"Note here that the GetCapabilities and DescribeProcess requests will return "
"odd results as we didn't modified any metadata informations, you can edit "
"the ``.zcfg`` files to set correct values. By the way it can be used for "
"testing purpose, as the input and output get the same name and "
"default/supported formats."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1041
msgid ""
"Once again, you can easily copy and paste the function for Boundary and "
"simply modify the line where the Geometry method was called. Nevertheless, "
"as we did for the C language we will give you a simple way to get things "
"more generic."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1045
msgid ""
"First of all, the first step which consists in extracting the InputPolygon "
"Geometry as it will be used in the same way in each Service functions, so we"
" will first create a function which will do that for us. The same thing can "
"also be done for filling the output value, so we will define another "
"function to do that automaticaly. Here is the code of this two functions "
"(extractInputs and outputResult) :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1067
msgid ""
"We can so minimize the code of the Boundary function to make it simplier "
"using the following function definition :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1079
msgid ""
"Then definition of the ConvexHull and Centroid Services can be achieved "
"using the following code:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1101
msgid ""
"Note, that in Python you also need to use ConvexHull to deal with "
"MultiPolygons."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1103
msgid ""
"You must now copy the ``Boundary.zcfg`` file as we explained for the C "
"version in ``ConvexHull.zcfg`` and ``Centroid.zcfg`` respectively and then, "
"use make install command to re-deploy and test your Services Provider."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1106
msgid "Create the Buffer Service"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1108
msgid ""
"We can now work on the Buffer Service, which takes more arguments than the "
"other ones. Indeed, the code is a bit different from the one used to "
"implement the Boundary, ConvexHull and Centroid Services."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1111
msgid ""
"The Buffer service also takes an input geometry, but uses a BufferDistance "
"parameter. It will also allow you to define LitteralData block as the "
"BufferDistance will be simple integer value. The read access to such kind of"
" input value is made using the same function as used before."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1119
msgid ""
"If you go back to the first Boundary Service source code, you should not "
"find the following very complicated. Indeed, you simply have to add the "
"access of the BufferDistance argument and modify the line whenthe  "
"`OGR_G_Buffer "
"<http://www.gdal.org/ogr/ogr__api_8h.html#1ca0bd5c0fcb4b1af3c3973e467b0ec0>`__"
" must be called (instead of OGR_G_GetBoundary). Here is the ful lcode :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1161
msgid ""
"The new code must be inserted in your service.c file and need to be "
"recompiled and replace the older version of your ZOO Service Provider in the"
" /usr/lib/cgi-bin/ directory. You must of course place the corresponding ZOO"
" Metadata File in the same directory."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1165
msgid ""
"As we explained before, ZOO Kernel is permissive in the sense that you can "
"pass more arguments than defined in you zcfg file, so let's try using a copy"
" of the ``Boundary.zcfg`` file renamed as ``Buffer.zcfg`` and containing the"
" Buffer identifier. Then, please test your service using an Execute request "
"as you did before. You will obtain the buffer result in a ResponseDocument."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1171
msgid ""
"You may have noted that the above code check if a BufferDistance input was "
"passed to the service. If not, we will use 1 as the default value, which "
"explains why you do not have to use one more input to your previous queries."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1175
msgid ""
"You can change the BufferDistance value used by your Service to compute "
"Buffer of your geometry by adding it to the DataInputs value in your "
"request. Note that using KVP syntaxe, each DataInputs are separated by a "
"semicolon."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1179
msgid "So, the previous request:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1185
msgid "Can now be rewritten this way :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1191
msgid ""
"Setting BufferDistance value to 2 would give you a different result, then "
"don't pass any other parameter as we defined 1 as the default value in the "
"source code."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1194
msgid ""
"Here you can find the same query in XML format to use from the  "
"http://localhost/test_services.html HTML form :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1227
msgid ""
"As we already defined the utility functions createGeometryFromWFS and "
"outputResult, the code is as simple as this:"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1244
msgid ""
"We simply added the use of inputs[\"BufferDistance\"][\"value\"] as "
"arguments of the Geometry instance Buffer method. Once you get this code "
"added to your ogr_ws_service_provider.py file, simply copy it in the ZOO "
"Kernel directory (or type make install from your ZOO Service Provider root "
"directory). Note that you also need the ``Buffer.zcfg`` file detailled in "
"the next section."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1250
msgid "The Buffer MetadataFile file"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1252
msgid ""
"You must add BufferDistance to the Service Metadata File to let clients know"
" that this Service supports this parameter. To do this, please copy your "
"orginal ``Boundary.zcfg`` file as ``Buffer.zcfg`` and add the following "
"lines to the DataInputs block :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1274
msgid ""
"Note that as minOccurs is set to 0 which means that the input parameter is "
"optional and don't have to be passed. You must know that ZOO Kernel will "
"pass the default value to the Service function for an optional parameter "
"with a default value set."
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1278
msgid "You can get a full copy of the ``Buffer.zcfg`` file here :"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1280
msgid ""
"http://zoo-project.org/trac/browser/trunk/zoo-services/ogr/base-vect-ops"
"/cgi-env/Buffer.zcfg"
msgstr ""

#: ../../workshop/2010/ogr_base_vect_ops.txt:1282
msgid ""
"You can now ask ZOO Kernel for GetCapabilities, DescribeProcess and Execute "
"for the Buffer Service."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:4
msgid "Using ZOO from an OSGeoLive virtual machine"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:10
msgid ""
"`OSGeoLive <http://live.osgeo.org/>`__ is a live DVD and virtual machine "
"based on  `Xubuntu <http://www.xubuntu.org/>`__ that allows you to try a "
"wide variety of open source geospatial software without installing anything."
" It is composed entirely of free software and include ZOO 1.0 this year, for"
" testing purpose."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:13
msgid "ZOO Kernel Installation"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:15
msgid ""
"As already said in introduction, an OSGeoLive virtual machine image disk has"
" been installed on your computer, allowing you to use ZOO Kernel in a "
"development environment directly. Using a virtual machine image disk seems "
"to be the simplest way to use ZOO Kernel and to develop ZOO Services "
"locally, as we can ensure that everything requested for compiling C Services"
" and running Python ones is available and ready to use. Every ZOO related "
"material and source code have been placed in ``/home/user/zoows`` directory."
" We will work inside it during this workshop. As the binary version of ZOO "
"Kernel is already compiled and stored in ``/home/user/zoows/sources/zoo-"
"kernel``, you only have to copy two important files inside the ``/usr/lib"
"/cgi-bin`` directory : ``zoo_loader.cgi`` and the ``main.cfg`` in order to "
"make ZOO Kernel available, using the following commands :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:33
msgid ""
"Please note that we will talk about ZOO Kernel or ``zoo_loader.cgi`` script "
"without any distinction during this workshop."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:36
msgid ""
"The ``main.cfg`` file contains metadata informations about the "
"identification and provider but also some important settings. The file is "
"composed of various sections, namely main, identification and provider per "
"default. Obviously, you are free to add new sections to the file if you need"
" them for a specific Service. Nevertheless, you have to know that the env "
"and lenv sections name are used in a specific way."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:42
msgid ""
"The env section lets you define environment variables that your Service "
"requires during its runtime. For instance, if your Service requires to "
"access to a X server running on framebuffer, then you will have to set the "
"``DISPLAY`` environnement variably, in this case you would add "
"``DISPLAY=:1`` line in your env section."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:47
msgid ""
"As for the env section, there is the section lenv where specific "
"informations about status informations of a running Service will be written "
"by the ZOO Kernel or the ZOO Services. For instance, when your service "
"failed, you can set the value for message in lenv to see it displayed in the"
" Status node of the ExecuteResponse returned back to the client. If your "
"service will take long time and can get informations about processing "
"status, you can then set a value between 0 and 100 to status in lenv to "
"represent the percentage completed of the running Service task, we will talk"
" deeper about this later in this workshop."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:56
msgid ""
"Please take a look to your local file ``main.cfg`` file. Three important "
"parameters are commented bellow:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:58
msgid "serverAddress : The url to access to the ZOO Kernel"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:59
msgid "tmpPath : The full path to store temporary files"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:60
msgid ""
"tmpUrl : The url path relative to serverAddress to access temporary "
"directory."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:62
msgid ""
"The values of the main.cfg file used from the running virtual machine are "
"the following :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:70
msgid ""
"You could have noticed that the tmpUrl is a relative url from "
"``serverAddress``, so it must be a directory. Even if ZOO Kernel can be used"
" with the full url of the ``zoo_loader.cgi`` script, for better readability "
"and fully functional ZOO Kernel, you have to modify the default Apache "
"configuration in order to be able to use the http://localhost/zoo/ url "
"directly."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:76
msgid ""
"First, please create a ``zoo`` directory in the existing ``/var/www`` which "
"is used by Apache as the ``DocumentRoot``. Then, please edit the "
"``/etc/apache2/sites-available/default`` configuration file and add the "
"following lines after the ``Directory`` block related to ``/var/www`` "
"directory :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:89
msgid ""
"Now create a small ``.htaccess`` file in the ``/var/www/zoo`` containing the"
" following lines:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:98
msgid ""
"For this last file to be taken into account by Apache, you must activate the"
" rewrite Apache module by copying a load file as bellow :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:105
msgid "Or using the ``a2enmod`` tool this way :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:111
msgid ""
"Now you should be able to access the ZOO Kernel using a simplified by "
"restarting your Apache Web server :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:118
msgid ""
"Two other softwares form the OSGeoLive environment will be used during this "
"workshop. MapServer will first be used to provide WFS input data for the ZOO"
" Services we are going to develop. The MapServer dataset providen by Orkney "
"(japanese regions polygons) will be passed to our service during `section 4 "
"<http://zoo-"
"project.org/trac/wiki/ZooWorkshop/FOSS4GJapan/CreatingOGRBasedWebServices#CallingthesinglegeometryservicesfromJavaScript>`__."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:123
msgid ""
"OpenLayers library is also available on the OSGeoLive virtual machine image "
"disk, and it will be used during `section 4 <http://zoo-"
"project.org/trac/wiki/ZooWorkshop/FOSS4GJapan/CreatingOGRBasedWebServices#CallingthesinglegeometryservicesfromJavaScript>`__,"
" for building a simple WPS client application able to query the newly "
"developed ZOO Services."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:126
msgid ""
"As we planned to use OGR C-API and Python module of the GDAL library, we "
"will need the corresponding header files, libraries and associated files. "
"Hopefully everything was already available per default and so ready to use "
"on the OSGeoLive packaging."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:131
#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:129
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:160
msgid "Testing the ZOO installation with GetCapabilities"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:134
msgid ""
"You can now simply query ZOO Kernel using the following request from your "
"Internet browser:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:136
#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:134
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:165
msgid ""
"http://localhost/cgi-bin/zoo_loader.cgi?Request=GetCapabilities&Service=WPS"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:138
msgid ""
"You should then get a valid Capabilities XML document, as the following :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:145
msgid ""
"Please note that no Process node is returned in the ProcessOfferings "
"section, as no ZOO Service is available yet. You can also proceed to a "
"GetCapabilities request from the command line, using the following command:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:154
#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:149
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:180
msgid ""
"The same result as in your browser will be returned, as shown in the "
"following screenshot:"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:161
#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:155
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:186
msgid ""
"Invoking ZOO Kernel from command line can be helpful during development "
"process of new Services."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:164
msgid "Preparing your ZOO Services Provider directory"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:166
msgid ""
"In order to simplify the task, we will first comment the directory structure"
" which should be used when creating a new Services Provider :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:169
msgid "The main Services Provider directory including :"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:171
msgid ""
"A ``cgi-env`` directory which will contain all the zcfg metadata files and "
"the service shared object (C Shared Library or Python module)"
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:172
msgid ""
"The ``Makefile`` and the ``*c`` files needed to compile your Services "
"Provider."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:174
msgid ""
"Please create a ws_sp main Services Provider directory in the existing zoo-"
"services one located in ``/home/user/zoows/sources/``, respecting the tree "
"above ."
msgstr ""

#: ../../workshop/2010/using_zoo_from_osgeolivevm.txt:180
msgid ""
"The Makefile and the code of the C and Python Service Shared Object will be "
"detailed in the next sections."
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:5
msgid "Presenting building blocks - Using OGR based Web Services"
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:14
msgid ""
"In this section, you will use basic ZOO-Services : ``BufferPy``, "
"``IntersectionPy`` and ``DifferencePy`` which use OGR Python module. The "
"intended goal of this section is to present and interact with your new "
"building blocks before chaining them in the next section."
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:18
msgid ""
"First of all, you should use the following link to access a user interface "
"to interact with your service : `http://localhost/zoows-demo/spatialtools-"
"py.html <http://localhost/zoows-demo/spatialtools-py.html>`__"
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:22
#: ../../workshop/2013/building_blocks_presentation.txt:26
msgid "Services Provider and configuration files"
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:24
msgid ""
"First you may verify if the ZOO-Services are available from your current "
"setup. You can take a look at the ``Buffer.zcfg``, ``Intersection.zcfg`` and"
" ``DifferencePy.zcfg`` to get details about parameters. As you can see from "
"the ZCFG files, you will use ZOO-Services provided by the ``foss4g_ws`` "
"Python service provider. So if you want to modify the Python code you will "
"have to edit this file. You are invited to use similar requests as you seen "
"in previous sections to learn about each service."
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:33
#: ../../workshop/2013/building_blocks_presentation.txt:38
msgid "The Buffer Service"
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:35
#: ../../workshop/2013/building_blocks_presentation.txt:40
msgid ""
"First click on a street then once the street is displayed in blue, click the"
" 'Buffer' button on top, you should get similar result as displayed in the "
"following."
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:42
#: ../../workshop/2013/building_blocks_presentation.txt:47
msgid ""
"Since version ZOO-Project 1.2.0, you can run automatically some basic tests "
"to make sure that you wrote a correct ZCFG file and your service is "
"validating."
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:45
#: ../../workshop/2013/building_blocks_presentation.txt:50
msgid ""
"the current testing is really simple and should be adapted to each Services "
"Provider, mainly to define input names."
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:48
#: ../../workshop/2013/building_blocks_presentation.txt:53
msgid "You can use the following command:"
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:56
#: ../../workshop/2013/building_blocks_presentation.txt:61
msgid ""
"During or after the test run, you can take a look inside the ``tmp`` "
"directory which contains both the XML requests send to the ZOO Kernel "
"(``*1.xml``) and the responses it gave (``output*.xml``)."
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:61
#: ../../workshop/2013/building_blocks_presentation.txt:66
msgid "The Intersection Service"
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:63
#: ../../workshop/2013/building_blocks_presentation.txt:68
msgid ""
"Using the same client interface as before, once you get a Buffer, you can "
"then select a street intersecting the Buffer geometry to compute "
"intersection by clicking on the Intersection button."
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:73
msgid "The Difference Service"
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:75
#: ../../workshop/2013/building_blocks_presentation.txt:80
msgid ""
"Using the same instructions as for Intersetion, you can get the following "
"result."
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:83
#: ../../workshop/2012/first_service.txt:338
#: ../../workshop/2012/js_services_chaining.txt:517
#: ../../workshop/2013/building_blocks_presentation.txt:145
#: ../../workshop/2013/first_service.txt:352
#: ../../workshop/2013/js_services_chaining.txt:577
msgid "Conclusion"
msgstr ""

#: ../../workshop/2012/building_blocks_presentation.txt:85
msgid ""
"Now you know this three services, and you get a simple interface to interact"
" with your MapServer WFS and your ZOO-Project WPS Servers, you are ready to "
"use the Services in a different way by chaining them using the ZOO-API to "
"build more complexe and powerfull services."
msgstr ""

#: ../../workshop/2012/first_service.txt:5
#: ../../workshop/2013/first_service.txt:5
msgid "Creating your first ZOO Service"
msgstr ""

#: ../../workshop/2012/first_service.txt:14
#: ../../workshop/2013/first_service.txt:14
msgid ""
"In this part, you will create and publish from a simple ZOO Service named "
"``Hello`` which will simply return a hello message containing the input "
"value provided. It will be usefull to present in deeper details general "
"concept on how ZOO-Kernel works and handles request."
msgstr ""

#: ../../workshop/2012/first_service.txt:19
#: ../../workshop/2013/first_service.txt:19
msgid "Service and publication process overview"
msgstr ""

#: ../../workshop/2012/first_service.txt:21
#: ../../workshop/2013/first_service.txt:21
msgid ""
"Before starting developing a ZOO Service, you should remember that in ZOO-"
"Project, a Service is a couple made of:"
msgstr ""

#: ../../workshop/2012/first_service.txt:24
#: ../../workshop/2013/first_service.txt:24
msgid ""
"a metadata file: a ZOO Service Configuration File (ZCFG) containing metadata"
" informations about a Service (providing informations about default / "
"supported inputs and outputs for a Service)"
msgstr ""

#: ../../workshop/2012/first_service.txt:27
#: ../../workshop/2013/first_service.txt:27
msgid ""
"a Services Provider: it depends on the programming language used, but for "
"Python it is a module and for JavaScript a script file."
msgstr ""

#: ../../workshop/2012/first_service.txt:30
#: ../../workshop/2013/first_service.txt:30
msgid ""
"To publish your Service, which means make your ZOO Kernel aware of its "
"presence, you should copy a ZCFG file in the directory where "
"``zoo_loader.cgi`` is located (in this workshop, ``/usr/lib/cgi-bin``)."
msgstr ""

#: ../../workshop/2012/first_service.txt:33
#: ../../workshop/2013/first_service.txt:33
msgid ""
"only the ZCFG file is required  for the Service to be considerate as "
"available. So if you don't get the Service Provider, obviously your Execute "
"request will fail as we will discuss later."
msgstr ""

#: ../../workshop/2012/first_service.txt:37
#: ../../workshop/2013/first_service.txt:37
msgid ""
"Before publication, you should store your ongoing work, so you'll start by "
"creating a directory to store the files of your Services Provider:"
msgstr ""

#: ../../workshop/2012/first_service.txt:44
msgid ""
"Once both the ZCFG and the Python module are both ready, you can publish "
"simply by copying the corresponding files in the same directory as the ZOO-"
"Kernel."
msgstr ""

#: ../../workshop/2012/first_service.txt:48
#: ../../workshop/2013/first_service.txt:48
msgid "Creating your first ZCFG file"
msgstr ""

#: ../../workshop/2012/first_service.txt:50
msgid ""
"You will start by creating the ZCFG file for the ``Hello`` Service. Edit the"
" ``/home/user/zoo-ws-2012/src/zoo-project/zoo-services/ws_sp/Hello.zcfg`` "
"file and add the following content:"
msgstr ""

#: ../../workshop/2012/first_service.txt:88
#: ../../workshop/2013/first_service.txt:86
msgid ""
"the name of the ZCFG file and the name between braket (here ``[Hello]``) "
"should be the same and correspond to the function name you will define in "
"your Services provider."
msgstr ""

#: ../../workshop/2012/first_service.txt:92
#: ../../workshop/2013/first_service.txt:90
msgid ""
"As you can see in the ZOO Service Configuration File presented above it is "
"divided into three distinct sections:"
msgstr ""

#: ../../workshop/2012/first_service.txt:94
#: ../../workshop/2013/first_service.txt:92
msgid "Main Metadata information (from line 2 to 8)"
msgstr ""

#: ../../workshop/2012/first_service.txt:95
msgid "List of Inputs metadata information (from 9 line to 20)"
msgstr ""

#: ../../workshop/2012/first_service.txt:96
msgid "List of Outputs metadata information (from line 21 to 36)"
msgstr ""

#: ../../workshop/2012/first_service.txt:98
#: ../../workshop/2013/first_service.txt:96
msgid ""
"You can get more informations about ZCFG from `the reference documentation "
"<http://zoo-project.org/docs/services/zcfg-reference.html>`__."
msgstr ""

#: ../../workshop/2012/first_service.txt:101
#: ../../workshop/2013/first_service.txt:99
msgid ""
"If you copy the ``Hello.zcfg`` file in the same directory as your ZOO Kernel"
" then you will be able to request for DescribeProcess using the ``Hello`` "
"``Identifier``. The ``Hello`` service should also be listed from "
"Capabilities document."
msgstr ""

#: ../../workshop/2012/first_service.txt:110
#: ../../workshop/2013/first_service.txt:108
msgid "Test requests"
msgstr ""

#: ../../workshop/2012/first_service.txt:112
#: ../../workshop/2013/first_service.txt:110
msgid ""
"In this section you will tests each WPS requests : GetCapabilities, "
"DescribeProcess and Execute. Note that only GetCapabilities and "
"DescribeProcess should work at this step."
msgstr ""

#: ../../workshop/2012/first_service.txt:117
#: ../../workshop/2013/first_service.txt:115
msgid "Test the GetCapabilities request"
msgstr ""

#: ../../workshop/2012/first_service.txt:119
#: ../../workshop/2013/first_service.txt:117
msgid "If you run the ``GetCapabilities`` request:"
msgstr ""

#: ../../workshop/2012/first_service.txt:125
#: ../../workshop/2013/first_service.txt:123
msgid ""
"Now, you should find your Hello Service in a ``Process`` node in "
"``ProcessOfferings``:"
msgstr ""

#: ../../workshop/2012/first_service.txt:137
#: ../../workshop/2013/first_service.txt:135
msgid "Test the DescribeProcess request"
msgstr ""

#: ../../workshop/2012/first_service.txt:139
#: ../../workshop/2013/first_service.txt:137
msgid ""
"You can access the ``ProcessDescription`` of the ``Hello`` service using the"
" following ``DescribeProcess`` request:"
msgstr ""

#: ../../workshop/2012/first_service.txt:146
#: ../../workshop/2013/first_service.txt:144
msgid "You should get the following response:"
msgstr ""

#: ../../workshop/2012/first_service.txt:180
#: ../../workshop/2013/first_service.txt:178
msgid "Test the Execute request"
msgstr ""

#: ../../workshop/2012/first_service.txt:182
#: ../../workshop/2013/first_service.txt:180
msgid ""
"Obviously, you cannot run your Service because the Python file was not "
"published yet. If you try the following ``Execute`` request:"
msgstr ""

#: ../../workshop/2012/first_service.txt:189
#: ../../workshop/2013/first_service.txt:187
msgid ""
"You should get an ExceptionReport similar to the one provided in the "
"following, which is normal behavior:"
msgstr ""

#: ../../workshop/2012/first_service.txt:201
#: ../../workshop/2013/first_service.txt:199
msgid "Implementing the Python Service"
msgstr ""

#: ../../workshop/2012/first_service.txt:204
#: ../../workshop/2013/first_service.txt:202
msgid "General Principles"
msgstr ""

#: ../../workshop/2012/first_service.txt:206
#: ../../workshop/2013/first_service.txt:204
msgid ""
"The most important thing you must know when implementing a new ZOO-Services "
"using the Python language is that the function corresponding to your Service"
" returns an integer value representing the status of execution "
"(``SERVICE_FAILED`` [#f1]_ or ``SERVICE_SUCCEEDED`` [#f2]_) and takes three "
"arguments (`Python dictionaries "
"<http://docs.python.org/tutorial/datastructures.html#dictionaries>`__):"
msgstr ""

#: ../../workshop/2012/first_service.txt:213
#: ../../workshop/2013/first_service.txt:211
msgid ""
"``conf`` : the main environment configuration (corresponding to the main.cfg"
" content)"
msgstr ""

#: ../../workshop/2012/first_service.txt:214
#: ../../workshop/2013/first_service.txt:212
msgid ""
"``inputs`` : the requested / default inputs (used to access input values)"
msgstr ""

#: ../../workshop/2012/first_service.txt:215
#: ../../workshop/2013/first_service.txt:213
msgid ""
"``outputs`` : the requested / default outputs (used to store computation "
"result)"
msgstr ""

#: ../../workshop/2012/first_service.txt:217
#: ../../workshop/2013/first_service.txt:215
msgid ""
"when your service return ``SERVICE_FAILED`` you can set "
"``conf[\"lenv\"][\"message\"]`` to add a personalized message in the "
"ExceptionReport returned by the ZOO Kernel in such case."
msgstr ""

#: ../../workshop/2012/first_service.txt:221
#: ../../workshop/2013/first_service.txt:219
msgid ""
"You get in the following a sample ``conf`` value based on the ``main.cfg`` "
"file you saw `before <using_zoo_from_osgeolivevm.html#zoo-kernel-"
"configuration>`__."
msgstr ""

#: ../../workshop/2012/first_service.txt:261
#: ../../workshop/2013/first_service.txt:259
msgid ""
"In the following you get a sample outputs value passed to a Python or a "
"JavaScript Service:"
msgstr ""

#: ../../workshop/2012/first_service.txt:274
#: ../../workshop/2013/first_service.txt:272
msgid ""
"the ``inRequest`` value is set internally by the ZOO-Kernel and can be    "
"used to determine from the Service if the key was provided in the request."
msgstr ""

#: ../../workshop/2012/first_service.txt:277
#: ../../workshop/2013/first_service.txt:286
msgid "The Hello Service"
msgstr ""

#: ../../workshop/2012/first_service.txt:279
msgid ""
"You can copy and paste the following into the ``/home/user/zoo-ws-2012/src"
"/zoo-project/zoo-services/ws_sp/cgi-env/test_service.py`` file."
msgstr ""

#: ../../workshop/2012/first_service.txt:289
#: ../../workshop/2013/first_service.txt:299
msgid ""
"Once you finish editing the file, you should copy it in the ``/usr/lib/cgi-"
"bin`` directory:"
msgstr ""

#: ../../workshop/2012/first_service.txt:297
#: ../../workshop/2013/first_service.txt:307
msgid "Interracting with your service using Execute requests"
msgstr ""

#: ../../workshop/2012/first_service.txt:299
#: ../../workshop/2013/first_service.txt:309
msgid "Now, you can request for Execute using the following basic url:"
msgstr ""

#: ../../workshop/2012/first_service.txt:305
#: ../../workshop/2013/first_service.txt:315
msgid ""
"You can request the WPS Server to return a XML WPS Response containing the "
"result of your computation, requesting for ResponseDocument or you can "
"access the data directly requesting for RawDataOutput."
msgstr ""

#: ../../workshop/2012/first_service.txt:309
#: ../../workshop/2013/first_service.txt:319
msgid "Sample request using the RawDataOutput parameter:"
msgstr ""

#: ../../workshop/2012/first_service.txt:315
#: ../../workshop/2013/first_service.txt:325
msgid "Sample request using the default ResponseDocument parameter:"
msgstr ""

#: ../../workshop/2012/first_service.txt:321
#: ../../workshop/2013/first_service.txt:331
msgid ""
"When you are using ResponseDocument there is specific attribut you can use "
"to ask the ZOO Kernel to store the result: ``asReference``. You can use the "
"following example:"
msgstr ""

#: ../../workshop/2012/first_service.txt:328
msgid ""
"When computation take long time, the client should request setting both "
"``storeExecuteResponse`` and ``status`` parameter to true. This will make "
"the ZOO Kernel directly return a response containing a ``statusLocation`` "
"attribut which can be used to access the status of an ongoing service or the"
" result when the process ended."
msgstr ""

#: ../../workshop/2012/first_service.txt:340
msgid ""
"Even if this first service was really simple it was useful to illustrate how"
" the ZOO-Kernel fill ``conf``, ``inputs`` and ``outputs`` parameter prior to"
" load and run your function service, how to write a ZCFG file, how to "
"publish a Services Provider by placing the ZCFG and Python files in the same"
" directory as the ZOO-Kernel, then how to interract with your service using "
"both ``GetCapabilities``, ``DescribeProcess`` and ``Execute`` requesr. We "
"will see in the `next section <ogr_base_vect_ops.html>`__ how to write "
"similar requests using the XML syntax."
msgstr ""

#: ../../workshop/2012/first_service.txt:350
#: ../../workshop/2012/js_services_chaining.txt:526
#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:158
#: ../../workshop/2013/first_service.txt:364
#: ../../workshop/2013/js_services_chaining.txt:582
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:189
msgid "Footnotes"
msgstr ""

#: ../../workshop/2012/first_service.txt:351
#: ../../workshop/2013/first_service.txt:365
msgid "``SERVICE_FAILED=4``"
msgstr ""

#: ../../workshop/2012/first_service.txt:352
#: ../../workshop/2013/first_service.txt:366
msgid "``SERVICE_SUCCEEDED=3``"
msgstr ""

#: ../../workshop/2012/index.txt:5
msgid "Practical Introduction to ZOO-Project by playing with building blocks"
msgstr ""

#: ../../workshop/2012/index.txt:7
msgid "GÃ©rald Fenoy, Nicolas Bozon"
msgstr ""

#: ../../workshop/2012/index.txt:8
msgid "gerald.fenoy at geolabs.fr, nicolas.bozon at gmail.com"
msgstr ""

#: ../../workshop/2012/index.txt:9 ../../workshop/2013/index.txt:9
msgid "$Date$"
msgstr ""

#: ../../workshop/2012/index.txt:13
msgid "FOSS4G 2012 Prague"
msgstr ""

#: ../../workshop/2012/index.txt:38 ../../workshop/2013/index.txt:48
msgid "Special thanks to our Knowledge Partners"
msgstr ""

#: ../../workshop/2012/index.txt:60 ../../workshop/2013/index.txt:70
msgid "WorkShop table of content"
msgstr ""

#: ../../workshop/2012/introduction.txt:14
#: ../../workshop/2013/introduction.txt:14
msgid ""
"ZOO-Project is a WPS (Web Processing Service) open source project released "
"under a `MIT/X-11 <http://zoo-project.org/trac/wiki/Licence>`__ style "
"license. It provides an OGC WPS compliant developer-friendly framework to "
"create and chain WPS Web services. ZOO is made of three parts:"
msgstr ""

#: ../../workshop/2012/introduction.txt:16
#: ../../workshop/2013/introduction.txt:16
msgid ""
"`ZOO Kernel <http://zoo-project.org/docs/kernel/index.html#kernel>`__ : A "
"powerful server-side C Kernel which makes it possible to manage and chain "
"Web services coded in different programming languages."
msgstr ""

#: ../../workshop/2012/introduction.txt:17
#: ../../workshop/2013/introduction.txt:17
msgid ""
"`ZOO Services <http://zoo-project.org/docs/services/index.html#services>`__ "
": A growing suite of example Web Services based on various open source "
"libraries."
msgstr ""

#: ../../workshop/2012/introduction.txt:18
#: ../../workshop/2013/introduction.txt:18
msgid ""
"`ZOO API <http://zoo-project.org/docs/api/index.html#api>`__ : A server-side"
" JavaScript API able to call and chain the ZOO Services, which makes the "
"development and chaining processes easier and faster."
msgstr ""

#: ../../workshop/2012/introduction.txt:20
#: ../../workshop/2013/introduction.txt:20
msgid ""
"ZOO was designed to make the service creation and deployment easy, by "
"providing a powerful system able to understand and execute WPS compliant "
"queries. It supports seven programming languages, thus allowing you to "
"create Web Services using the one you prefer. It also lets you use an "
"existing code and to turn it as a WPS Service. The current supported "
"programming languages are the following:"
msgstr ""

#: ../../workshop/2012/introduction.txt:23
#: ../../workshop/2013/introduction.txt:23
msgid "C/C++"
msgstr ""

#: ../../workshop/2012/introduction.txt:24
#: ../../workshop/2013/introduction.txt:24
msgid "Python"
msgstr ""

#: ../../workshop/2012/introduction.txt:25
#: ../../workshop/2013/introduction.txt:25
msgid "Perl"
msgstr ""

#: ../../workshop/2012/introduction.txt:26
#: ../../workshop/2013/introduction.txt:26
msgid "Java"
msgstr ""

#: ../../workshop/2012/introduction.txt:27
#: ../../workshop/2013/introduction.txt:27
msgid "Fortran"
msgstr ""

#: ../../workshop/2012/introduction.txt:28
#: ../../workshop/2013/introduction.txt:28
msgid "PHP"
msgstr ""

#: ../../workshop/2012/introduction.txt:29
#: ../../workshop/2013/introduction.txt:29
msgid "JavaScript"
msgstr ""

#: ../../workshop/2012/introduction.txt:31
#: ../../workshop/2013/introduction.txt:31
msgid ""
"More information on the project is available on the  `ZOO Project official "
"website <http://www.zoo-project.org/>`__ ."
msgstr ""

#: ../../workshop/2012/introduction.txt:36
#: ../../workshop/2013/introduction.txt:36
msgid ""
"ZOO is based on a C Kernel which is the ZOO-Project core system (aka ZOO-"
"Kernel). The latter is able to dynamically load libraries and to handle them"
" as on-demand Web services."
msgstr ""

#: ../../workshop/2012/introduction.txt:38
#: ../../workshop/2013/introduction.txt:38
msgid ""
"A ZOO-Service is a link composed of a ZOO metadata file (.zcfg) and the code"
" for the corresponding implementation. The metadata file describes all the "
"available functions that can be called using a WPS Execute Request, as well "
"as the desired input/output. Services contain the algorithms and functions, "
"and can be implemented using any of the supported languages."
msgstr ""

#: ../../workshop/2012/introduction.txt:40
#: ../../workshop/2013/introduction.txt:40
msgid ""
"ZOO-Kernel works as CGI through Apache and can communicate with cartographic"
" engines and Web mapping clients. It simply adds the WPS support to your "
"spatial data infrastructure and your webmapping applications. It can use "
"every GDAL/OGR supported formats as input data and create suitable vector or"
" raster output for your cartographic engine and/or your web-mapping client "
"application."
msgstr ""

#: ../../workshop/2012/introduction.txt:45
msgid ""
"Participants will then learn how to use ZOO Kernel and how to create ZOO "
"Services using the OSGeo Live 5.5 A pre-compiled ZOO 1.3-dev package is "
"provided inside OSGeoLive, so participants won't have to compile and install"
" it manually. Configuration file and basic ways to run ZOO Kernel and ZOO "
"Service will be presented. Participants will be then invited to start "
"programming their own service using Python language. Some ZOO Services will "
"be presented and individually tested inside a ready-to-use OpenLayers "
"application. Finally, this services will be chained using the server-side "
"Javascript ZOO API."
msgstr ""

#: ../../workshop/2012/introduction.txt:47
msgid ""
"The whole workshop is organized step-by-step and numerous code snippets are "
"available along with their respective explanations. The instructors will "
"check the ZOO Kernel functioning on each machine and will assist you while "
"coding. Technical questions are of course welcome during the workshop."
msgstr ""

#: ../../workshop/2012/introduction.txt:50
#: ../../workshop/2013/introduction.txt:50
msgid "Usefull tips for reading"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:5
#: ../../workshop/2013/js_services_chaining.txt:5
msgid "Playing with buildign blocks - Creating JavaScript Web Services"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:15
#: ../../workshop/2013/js_services_chaining.txt:15
msgid ""
"This section illustrate how you can use JavaScript on the server-side to "
"chain services together to build new ones. You will create a ZOO Services "
"Provider using the services you seen before and the WFS server using the "
"ZOO-API. The final goal is to query all POIs included in a buffer around a "
"feature and to highlight them using a mask around this buffer. The following"
" screenshot show you the expected result:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:26
#: ../../workshop/2013/js_services_chaining.txt:32
msgid ""
"You can decompose the result above in two different ones: the mask around "
"the buffer and the points included in the buffer. So you will create two "
"different Services: one called ``BufferMask`` and another one called "
"``BufferRequest``."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:30
#: ../../workshop/2013/js_services_chaining.txt:36
msgid ""
"But before implementing any JavaScript Service, you will get an overview of "
"how to use ZOO-API from your ZOO-Project installation in the next section."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:33
msgid ""
"As before, you first create a new directory to store files for your new "
"Services Provider named ``ws2012js``:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:42
#: ../../workshop/2013/js_services_chaining.txt:48
msgid "ZOO-API Overview"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:44
#: ../../workshop/2013/js_services_chaining.txt:50
msgid ""
"ZOO-API and ZOO-Kernel JavaScript support make you able to run services "
"implemented in JavaScript on the server side. JavaScript is a popular "
"programing language but mostly used on the client side. Let say from a "
"browser, but here it is a bit different."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:49
#: ../../workshop/2013/js_services_chaining.txt:55
msgid ""
"To support JavaScript language ZOO-Kernel use the `SpiderMonkey "
"<https://developer.mozilla.org/en/SpiderMonkey>`__ API to create a "
"javascript runtime environment from which it will load your JS file then "
"extract the function corresponding to the service to run it using the "
"prefilled parameters. The JavaScript runtime environment created by the ZOO-"
"Kernel depend on your setup. If you placed the ``ZOO-api.js`` and ``ZOO-"
"proj4js.js`` in the same directory as your ZOO-Kernel it means that your "
"environment will contains ZOO-API and Proj4js will be loaded before your "
"service. In such case you can access to the Classes defined in the "
"JavaScript ZOO-API to manipulate geographic data, for more informations "
"please refer to the `ZOO-API Documentation <http://zoo-"
"project.org/docs/api/index.html>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:60
#: ../../workshop/2013/js_services_chaining.txt:66
msgid ""
"Even if it can be useful to run JavaScript on the server side, you should "
"remember that some basic JavaScript functions you are familiar with does not"
" exist or get a different behavior. For instance the simple ``alert`` "
"function will display messages in apache error logs rather than in a window "
"when used from a browser. The ``alert`` function can be used as follow:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:70
#: ../../workshop/2013/js_services_chaining.txt:76
msgid ""
"There is no XMLHttpRequest available in the JavaScript evironement your "
"service will run into. Hopefully, the ZOO-Kernel expose a C function to the "
"JavaScript world named: ``JSRequest``. This function make you able from your"
" JavaScript services to call other WPS services (locally or remotelly) or "
"other kind OGC services such as WFS. When you are using the ZOO-API it is "
"possible to call Services using a ``ZOO.Process`` instance [#f3]_, to parse "
"WPS Responses using ``ZOO.Format.WPS`` (cf. `ref <http://zoo-"
"project.org/docs/api/zoo-process.html>`__)."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:79
msgid ""
"As for Python services you already seen in previous sections, the functions "
"corresponding to a Service should take three arguments: ``conf``, ``inputs``"
" and ``outputs`` [#f4]_. Nevertheless, as the ZOO-Kernel is not able to "
"access the values modified [#f5]_ by the Service code, rather than returning"
" an integer as in Python, here you'll need to return both the integer value "
"representing the Status of your Service in a JavaScript Object and the "
"resulting ``outputs`` values as an Object. You can see in the following an "
"example of a JavaScript Service code:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:99
#: ../../workshop/2013/js_services_chaining.txt:105
msgid ""
"Before starting to implement the Services we will need to get our final "
"BufferRequest service, let start with a simplier one."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:103
#: ../../workshop/2013/js_services_chaining.txt:109
msgid "The Mask Service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:105
#: ../../workshop/2013/js_services_chaining.txt:111
msgid ""
"In this section you will learn how to create your first JavaScript service "
"which will simply return a rectangular mask around a selected feature. To "
"build this mask you will use the Buffer service to create a buffer big "
"enough around a selected geometry to cover a significant part of your map. "
"You can see the expected result in the following screenshot:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:115
#: ../../workshop/2013/js_services_chaining.txt:121
msgid ""
"As before, you will first start by writting the ZCFG, then you will write "
"the JavaScript source code and finish by publishing your Services Provider."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:119
#: ../../workshop/2012/js_services_chaining.txt:277
#: ../../workshop/2012/js_services_chaining.txt:402
#: ../../workshop/2013/js_services_chaining.txt:125
#: ../../workshop/2013/js_services_chaining.txt:280
#: ../../workshop/2013/js_services_chaining.txt:405
msgid "The ZCFG"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:121
msgid ""
"Open the file named ``~/zoo-ws-2012/src/zoo-project/zoo-services/ws2012js"
"/cgi-env/Mask.zcfg`` with your favorite text editor and add the following "
"content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:160
msgid ""
"Here you simply define one default ``ComplexData`` for both ``inputData`` "
"and ``Result``: a GML and a GeoJSON respectively [#f6]_."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:164
#: ../../workshop/2012/js_services_chaining.txt:322
#: ../../workshop/2013/js_services_chaining.txt:170
#: ../../workshop/2013/js_services_chaining.txt:325
msgid "The JavaScript service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:166
#: ../../workshop/2013/js_services_chaining.txt:172
msgid ""
"As you will have to request the Buffer service many times from your service,"
" you will first define a ``Buffer`` function as follow. It uses the "
"``ZOO.Process`` to request the Buffer service you seen in the previous "
"section."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:170
msgid ""
"Open a file named ``~/zoo-ws-2012/src/zoo-project/zoo-services/ws2012js/cgi-"
"env/foss4gws.js`` and add the following content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:204
#: ../../workshop/2013/js_services_chaining.txt:207
msgid ""
"From line 12 to 15, you give a GeoJSON string (created from ``inputData``) "
"for InputPolygon and, on line 14, you set the BufferDistance value to "
"``bDist``. On line 16, you define Result as a ResponseDocument, so you'll "
"have to parse the WPS response using the ZOO.Format.WPS, on line 21."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:209
#: ../../workshop/2013/js_services_chaining.txt:212
msgid ""
"On line 17, you create a `ZOO.Process <http://zoo-project.org/docs/api/zoo-"
"process.html#zoo-process>`__ instance providing the ZOO-Kernel url and the "
"Service name. Then, on line 18, you run the request passing inputs and "
"outputs previously defined (from line 12 to 15)."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:214
#: ../../workshop/2013/js_services_chaining.txt:217
msgid ""
"Now, you get your ``Buffer`` function, it is time to create your first "
"JavaScript service. So, edit your ``foss4gws.js`` file you created before "
"and add the following content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:250
#: ../../workshop/2012/js_services_chaining.txt:383
#: ../../workshop/2012/js_services_chaining.txt:507
#: ../../workshop/2013/js_services_chaining.txt:253
#: ../../workshop/2013/js_services_chaining.txt:386
#: ../../workshop/2013/js_services_chaining.txt:510
msgid "Publish and use your Service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:252
#: ../../workshop/2013/js_services_chaining.txt:255
msgid ""
"Now you get both your ZCFG and your service code ready, you need to deploy "
"your new Services Provider using the following command:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:259
msgid ""
"Now you are ready to use your JavaScript service by loading the the "
"following `url <http://localhost/zoows-demo/spatialtools.html>`__, click on "
"a street then click on the \"Mask\" button."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:264
#: ../../workshop/2013/js_services_chaining.txt:267
msgid "BufferMask Service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:266
#: ../../workshop/2013/js_services_chaining.txt:269
msgid ""
"In this section you will implement a simple JavaScript service which will be"
" able create a hole in the mask you created in `previous section <#mask-"
"service>`__. This service will be used to highlight the buffer zone around a"
" selected fature. You get a preview of the expected result in the following "
"screenshot:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:279
msgid ""
"Open the file named ``~/zoo-ws-2012/src/zoo-project/zoo-services/ws2012js"
"/cgi-env/BufferMask.zcfg`` with your favorite text editor and copy / paste "
"the following content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:318
#: ../../workshop/2013/js_services_chaining.txt:321
msgid ""
"This ZCFG is similar to the previous one. Please, refer to comments in the "
"`previous section <#the-zcfg>`__ for more informations."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:324
#: ../../workshop/2013/js_services_chaining.txt:327
msgid ""
"In this Service you will use same source code (until line 19) you used in "
"the `previous section <#the-javascript-service>`__. Indeed, you should "
"compute the Mask as you did before then compute Buffer for creating a hole "
"in the mask (on line 22) to run the Difference service (from line 25 to 40)."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:385
#: ../../workshop/2012/js_services_chaining.txt:509
msgid ""
"Now, you can publish your service as you did `before <#publish-your-"
"service>`__. To use your service, please use the following `url "
"<http://localhost/zoows-demo/spatialtools.html>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:390
#: ../../workshop/2013/js_services_chaining.txt:393
msgid "BufferRequest service"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:392
msgid ""
"In this section, you will create a new Service: ``BufferRequest`` which will"
" request POIs included in the Buffer around a selected feature [#f7]_. You "
"will use the ``poi`` layer served as WFS through your local mapserver "
"installation. You can see in the following screenshot the expected result:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:404
msgid ""
"Open the file named ``~/zoo-ws-2012/zoo-project/zoo-services/ws2011js/cgi-"
"env/BufferRequest.zcfg`` with your favorite text editor and copy / paste the"
" following content:"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:445
#: ../../workshop/2013/js_services_chaining.txt:448
msgid "The JavaScript code"
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:447
#: ../../workshop/2013/js_services_chaining.txt:450
msgid ""
"As in the previous Service, you will compute a buffer around the input "
"feature. But then you will request POIs available in the Buffer extent using"
" a WFS request to use them to run ``Intersection`` service using the initial"
" Buffer. The WFS request is useful to limit the number of points to use when"
" requesting the ``Intersection`` Service."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:501
#: ../../workshop/2013/js_services_chaining.txt:504
msgid ""
"to take advantage of the ZOO-Kernel cache system, you directly use the WFS "
"request  as ``xlink:href`` rather than value for ``InputEntity2`` (from line"
" 31 to 34) and use ``text/xml`` ``mimeType`` (on line 40). Indeed, the ZOO-"
"API doesn't use the internal cache mechanisms."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:513
#: ../../workshop/2013/js_services_chaining.txt:516
msgid ""
"You can click on \"Buffer Request and Mask\"  to get the same result as "
"presented in  `the initial screenshot <#introduction>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:519
#: ../../workshop/2013/js_services_chaining.txt:579
msgid ""
"After understanding how basic Geometric Operation Services works, here you "
"built step by step new JavaScript services which reuse the previous ones and"
" combine them in different ways. This was achieved using the ZOO-API, "
"composed by C functions exposed by the ZOO-Kernel to the JavaScript services"
" runtime environement and the JS files which can be optionally installed."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:527
#: ../../workshop/2013/js_services_chaining.txt:583
msgid ""
"The ``ZOO.Process`` class uses ``JSRequest`` (cf. `ref <http://zoo-"
"project.org/docs/api/zoo-format-wps.html>`__). You will get example of use "
"`later  <#the-javascript-service>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:530
#: ../../workshop/2013/js_services_chaining.txt:586
msgid ""
"So ``conf``, ``inputs`` and ``outputs`` are simple JavaScript objects, "
"similar to the Python dictionaries used in the `previous section "
"<ogr_base_vect_ops.html>`__."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:532
#: ../../workshop/2013/js_services_chaining.txt:588
msgid "Such as ``conf``, ``inputs`` and ``outputs``."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:533
#: ../../workshop/2013/js_services_chaining.txt:590
msgid ""
"Using one of the available ``ZOO.formats`` you are also able to support "
"various ``ComplexData`` for both input and output of the service. To "
"simplify the presentation here, you will use only this default ones."
msgstr ""

#: ../../workshop/2012/js_services_chaining.txt:536
#: ../../workshop/2013/js_services_chaining.txt:593
msgid "So in the hole you created in the previous section."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:5
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:5
msgid "Configuration and ZOO-Kernel use"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:12
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:29
msgid "ZOO-Kernel Configuration"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:14
msgid ""
"As already said in introduction, an OSGeoLive virtual machine image disk has"
" been installed on your computer, allowing you to use ZOO-Kernel in a "
"development environment directly. Every ZOO-Project related material and "
"source code have been placed in ``/home/user/zoo-ws-2012`` directory. We "
"will work with file included in this directory during this workshop."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:16
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:33
msgid ""
"we will use ZOO-Kernel or ``zoo_loader.cgi`` script without any distinction "
"in this document."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:19
msgid ""
"As explained later, the ZOO-Kernel may require to store temporary files in "
"``/var/www/temp``. Depending on parameters set in the ``main.cfg``,  cache "
"files would be located in the same directory."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:27
msgid ""
"General ZOO-Kernel settings are made in the ``main.cfg`` file located in the"
" same directory as the ZOO-Kernel, so in ``/usr/lib/cgi-bin/``. You can see "
"a typical ``main.cfg`` content in the following:"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:68
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:77
msgid ""
"The ``main.cfg`` file contains metadata informations about the "
"identification and provider but also some important settings. The file is "
"composed of various sections, namely ``[main]``, ``[identification]`` and "
"``[provider]`` per default."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:83
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:92
msgid "From the ``[main]`` section settings are as follow:"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:71
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:80
msgid ""
"``lang``: the supported languages separated by a coma (the first is the "
"default one),"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:72
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:81
msgid "``version``: the supported WPS version,"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:73
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:82
msgid "``encoding``: the default encoding of WPS Responses,"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:74
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:83
msgid "``serverAddress``: the url to access your ZOO-Kernel instance,"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:75
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:84
msgid ""
"``dataPath``: the path to store data files (when MapServer support was "
"activated, this directory is used to store mapfiles and data)."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:77
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:86
msgid ""
"``tmpPath``: the path to store temporary files (such as ExecuteResponse when"
" storeExecuteResponse was set to true),"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:79
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:88
msgid ""
"``tmpUrl``: a url relative to ``serverAddress`` to access the temporary "
"file,"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:80
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:89
msgid ""
"``cacheDir``: the path to store cached request files [#f1]_ (optional),"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:81
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:90
msgid "``mapservAddress``: your local MapServer address (optional),"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:82
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:91
msgid ""
"``msOgcVersion``: the version for all supported OGC Web Services output "
"[#f2]_ (optional)."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:85
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:94
msgid ""
"The ``[identification]`` and ``[provider]`` section are specific to OGC "
"metadata and should be set [#f3]_."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:88
msgid ""
"Obviously, you are free to add new sections to this file if you need more. "
"Nevertheless, you have to know that there is some specific names you should "
"use only for specific needs: ``[env]``, ``[lenv]`` and ``[senv]``."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:92
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:101
msgid ""
"``[senv]`` and ``[lenv]`` are used / produced on runtime internaly by the "
"ZOO-Kernel and should be defined only from the Service code."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:94
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:119
msgid ""
"The ``env`` section is used to store specific environment variables you want"
" to be set prior to load your Services Provider and run your Service. A "
"typical example, is when your Service requires to access to a X server "
"running on framebuffer, then you will have to set the ``DISPLAY`` "
"environnement variable, in this case you would add ``DISPLAY=:1`` line in "
"your ``[env]`` section."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:100
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:125
msgid ""
"The ``lenv`` is used to store runtime informations automatically set by the "
"ZOO-Kernel before running your service and can be accesses / updated from "
"it:"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:102
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:127
msgid "``sid``: the service unique identifier,"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:103
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:128
msgid ""
"``status``: the current progress value (value between 0 and 100, percent),"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:104
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:129
msgid "``cwd``: the current working directory of the ZOO-Kernel,"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:105
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:130
msgid ""
"``message``: an error message when returning ``SERVICE_FAILED`` (optional),"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:106
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:131
msgid ""
"``cookie``: the cookie your service want to return to the client (for "
"authentication purpose or tracking)."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:111
msgid ""
"The ``senv`` is used to store session informations on the server side. You "
"can then access them automatically from service if the server is requested "
"using a valid cookie. The ZOO-Kernel will store on disk the values set in "
"the ``senv`` maps, then load an dynamically added to the env stored in "
"``main.cfg``:"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:111
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:142
msgid ""
"``XXX``: the session unique identifier where ``XXX`` is the name included in"
" the"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:111
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:142
msgid "returned cookie."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:115
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:146
msgid ""
"For instance, if you get the following in your Service source code [#f4]_ :"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:122
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:153
msgid ""
"That means that the ZOO-Kernel will create a file ``sess_XXX1000000.cfg`` in"
" the ``cacheDir`` and return the specified cookie to the client. Each time "
"the client will request the ZOO-Kernel using the Cookie, it will "
"automatically load the value stored before running your service. You can "
"then easilly access this informations from your service source code. This "
"functionality won't be used in the following presentation."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:132
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:163
msgid ""
"You can request ZOO-Kernel using the following link from your Internet "
"browser:"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:136
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:167
msgid ""
"You should get a valid Capabilities XML document, looking like the following"
" :"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:142
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:173
msgid ""
"Please note that some Process node are returned in the ProcessOfferings "
"section, as somes are available already on OSGeoLive DVD. You can also run a"
" GetCapabilities request from the command line, using the following command:"
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:159
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:190
msgid ""
"when you use GET requests passed through ``xlink:href`` the ZOO-Kernel will "
"execute the request only once, the first time you will ask for this "
"ressource and it will store on disk the result. The next time you will need "
"the same feature, the cached file will be used which make your process "
"running faster. If ``cachedir`` was not specified in the ``main.cfg`` then "
"``tmpPath`` value will be used."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:164
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:195
msgid ""
"since version 1.3dev, when MapServer is activated, your service can "
"automatically return a WMS, WFS or WCS request to expose your data. Your can"
" set here the specific version number you want to use to request your local "
"MapServer setup. It depends mostly on the client capability to deal with "
"specific OGC Web Services version."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:168
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:199
msgid ""
"since version 1.3dev, when MapServer is activated, the same metadata will be"
" used for setting metadata for OGC Web Services."
msgstr ""

#: ../../workshop/2012/using_zoo_from_osgeolivevm.txt:170
#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:201
msgid ""
"If you're not familiar with ZOO-Project, you can `pass "
"<using_zoo_from_osgeolivevm#testing-the-zoo-installation-with-"
"getcapabilities>`__  this part and come to it after the next section."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:5
msgid ""
"Building blocks presentation - Using OGR and PgRouting based Web Services"
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:14
msgid ""
"In this section, you will use basic ZOO-Services : ``Buffer``, "
"``Intersection`` and ``DifferencePy`` which use OGR and psycopg Python "
"modules. The intended goal of this section is to present and interact with "
"your new building blocks before chaining them in the next section."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:18
msgid ""
"First of all, you should use the following links to access the user "
"interfaces and interact with your services, the first one is used to access "
"basic spatial-tools demo client interface and  the second to access the "
"routing application :"
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:22
msgid ""
"`http://localhost/zoows2013-demo/spatialtools-py.html "
"<http://localhost/zoows2013-demo/spatialtools-py.html>`__"
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:23
msgid "`http://localhost/zoo-ws2013/ <http://localhost/zoo-ws2013/>`__"
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:28
msgid ""
"First you may verify if the ZOO-Services are available from your current "
"setup. You can take a look at the ``Buffer.zcfg``, ``Intersection.zcfg`` and"
" ``DifferencePy.zcfg`` to get details about parameters. As you can see from "
"the ZCFG files, you will use ZOO-Services provided by the ``service`` Python"
" service provider. So if you want to modify the Python code you will have to"
" edit the corresponding file (so ``service.py``). You are invited to use "
"similar requests as the one used in previous sections to learn about each "
"services individually."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:78
msgid "The DifferencePy Service"
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:88
msgid "The Routing and Profile Services"
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:90
msgid ""
"First click on the blue flag then place your starting point on the map, do "
"the same with the red flag to get the shortest path computed by the "
"dedicated service and then display its profile. Note that when you pass the "
"mouse over the profile display then you will see its corresponding position "
"displayed on the map. You can also click on a specific step in your path to "
"get the corresponding line displayed."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:101
msgid ""
"If you take a look in the file: ``/usr/lib/cgi-bin/routing/do.zcfg`` you may"
" notice something new in the supported format which is reproduced here "
"after."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:115
msgid ""
"The ``mimeType`` is defined as ``image/png`` and there is two new parameter "
"which are both optional:"
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:117
msgid ""
"``useMapServer``: which make you able to inform the ZOO-Kernel that it have "
"to use MapServer to publish your result as WMS / WFS or WCS (this last won't"
" be used in this workshop) rather than simply storing the result as a file."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:121
msgid ""
"``msStyle``: which let you define your own MapServer ``STYLE`` block "
"definition."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:123
msgid ""
"When you need to access a result many time or for different purpose accross "
"other services then it is really useful to ask ZOO-Kernel to publish your "
"result as WMS, WFS or WCS."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:127
msgid ""
"Note that no modification of the code of the do service was required to "
"handle automatic pubilcation of the result as it is a vector format "
"supported by OGR, only modification of the zcfg was required."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:131
msgid ""
"This routing example is here to illustrate how easy it is to publish your "
"result as WMS, WFS or WCS ressource. Indeed, when your routing service was "
"called, ZOO-Kernel published the result as WMS and WFS ressources which was "
"both used first for the UI purpose, the WMS to display the resulting path on"
" the map, the WFS for displaying details about each steps. The WFS protocol "
"is also used as the input value for the profile computation. So, the "
"computation was run once and accessed three times for different purposes and"
" from different clients."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:141
msgid ""
"For more informations about the MapServer support, please refer to `the "
"official  ZOO-Project Documentation <http://zoo-"
"project.org/docs/kernel/mapserver.html>`_."
msgstr ""

#: ../../workshop/2013/building_blocks_presentation.txt:147
msgid ""
"Now you know this three services, and you get a simple interface to interact"
" with your MapServer WFS and your ZOO-Project WPS Servers, you are ready to "
"use the Services in a different way, by chaining them using the JavaScript "
"ZOO-API to build more complexe and powerfull services."
msgstr ""

#: ../../workshop/2013/first_service.txt:44
msgid ""
"Once the ZCFG and the Python module are both ready, you can publish simply "
"by copying the corresponding files in the same directory as the ZOO-Kernel."
msgstr ""

#: ../../workshop/2013/first_service.txt:50
msgid ""
"You will start by creating the ZCFG file for the ``Hello`` Service. Edit the"
" ``/home/user/zoo-ws2013/ws_sp/cgi-env/Hello.zcfg`` file and add the "
"following content:"
msgstr ""

#: ../../workshop/2013/first_service.txt:93
msgid "List of Inputs metadata information (from 9 line to 19)"
msgstr ""

#: ../../workshop/2013/first_service.txt:94
msgid "List of Outputs metadata information (from line 20 to 28)"
msgstr ""

#: ../../workshop/2013/first_service.txt:274
msgid ""
"ZOO-Project provide a ZOO-API which was originally only available for "
"JavaScript services, but thanks to the work of the ZOO-Project community, "
"now you have also access to a ZOO-API when using the Python language. Thanks"
" to the Python ZOO-API you don't have to remember anymore the value of "
"SERVICE_SUCCEDED and SERVICE_FAILED, you have the capability to translate "
"any string from your Python service by calling the ``_`` function (ie: "
"``zoo._('My string to translate')``) or to update the current status of a "
"running service by using the ``update_status`` function the same way you use"
" it from JavaScript or C services."
msgstr ""

#: ../../workshop/2013/first_service.txt:288
msgid ""
"You can copy and paste the following into the ``/home/user/zoo-ws2013/ws_sp"
"/cgi-env/test_service.py`` file."
msgstr ""

#: ../../workshop/2013/first_service.txt:338
msgid ""
"When computation take long time, the client should request the execution of "
"a Service by setting both ``storeExecuteResponse`` and ``status`` parameter "
"to true to force asynchronous execution. This will make the ZOO-Kernel "
"return, without waiting for the Service execution completion but after "
"starting another ZOO-Kernel process responsible of the Service execution, a "
"ResponseDocument containing a ``statusLocation`` attribute which can be used"
" to access the status of an ongoing service or the result when the process "
"ended [#f3]_."
msgstr ""

#: ../../workshop/2013/first_service.txt:354
msgid ""
"Even if this first service was really simple it was useful to illustrate how"
" the ZOO-Kernel fill ``conf``, ``inputs`` and ``outputs`` parameter prior to"
" load and run your function service, how to write a ZCFG file, how to "
"publish a Services Provider by placing the ZCFG and Python files in the same"
" directory as the ZOO-Kernel, then how to interract with your service using "
"both ``GetCapabilities``, ``DescribeProcess`` and ``Execute`` requesr. We "
"will see in the `next section <building_blocks_presentation.html>`__ how to "
"write similar requests using the XML syntax."
msgstr ""

#: ../../workshop/2013/first_service.txt:367
msgid ""
"To get on-going status url in ``statusLocation``, you'll need to setup the "
"`utils/status <http://www.zoo-project.org/trac/browser/trunk/zoo-project"
"/zoo-services/utils/status>`_ Service. If you don't get this service "
"available, the ZOO-Kernel will simply give the url to a flat XML file stored"
" on the server which will contain, at the end of the execution, the result "
"of the Service execution."
msgstr ""

#: ../../workshop/2013/index.txt:5
msgid ""
"ZOO-Project: playing with building blocks to build pgRouting web application"
msgstr ""

#: ../../workshop/2013/index.txt:7
msgid "GÃ©rald Fenoy, Nicolas Bozon, Venkatesh Raghavan"
msgstr ""

#: ../../workshop/2013/index.txt:8
msgid ""
"gerald.fenoy at geolabs.fr, nicolas.bozon at gmail.com, venka at osgeo.org"
msgstr ""

#: ../../workshop/2013/index.txt:13
msgid "FOSS4G 2013 Nottingham"
msgstr ""

#: ../../workshop/2013/index.txt:21
msgid "FOSS4G-CEE 2013 Bucharest"
msgstr ""

#: ../../workshop/2013/introduction.txt:45
msgid ""
"You will learn how to use ZOO Kernel and how to create ZOO Services using "
"the OSGeo Live 7.0. Despite a pre-compiled ZOO 1.3-dev package is provided "
"inside OSGeoLive, some optional supports are not available in the default "
"setup. So you will be invited to download and uncompress a tarbal containing"
" binary versions of ZOO-Kernel, so there is no need to compile anything, "
"simple steps to install ZOO-Kernel will be introduced. Configuration file "
"and basic ways to run ZOO Kernel and ZOO Service will be presented. Then you"
" will be invited to start programming your own simple service using Python "
"language. Some ZOO Services will be presented and individually tested inside"
" a ready-to-use OpenLayers application. Finally, this services will be "
"chained using the server-side Javascript ZOO API."
msgstr ""

#: ../../workshop/2013/introduction.txt:47
msgid ""
"The whole workshop is organized step-by-step and numerous code snippets are "
"available. The instructors will check the ZOO-Kernel is functioning on each "
"machine and will assist you while coding. Technical questions are of course "
"welcome during the workshop."
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:26
msgid "For the routing interface result should look like this:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:39
msgid ""
"As before, you first create a new directory to store files for your new "
"Services Provider:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:85
msgid ""
"As for Python services you already seen in previous sections, the functions "
"corresponding to a Service should take three arguments: ``conf``, ``inputs``"
" and ``outputs`` [#f4]_. Nevertheless, as the ZOO-Kernel is not able to "
"access the values modified [#f5]_ by the Service code, rather than returning"
" an integer as in Python, here you'll need to return both the integer value "
"representing the Status of your Service in a JavaScript Object and the "
"resulting ``outputs`` values as an Object [#f6]_. You can see in the "
"following an example of a JavaScript Service code:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:127
msgid ""
"Open the file named ``~/zoo-ws2013/jschains/cgi-env/Mask.zcfg`` with your "
"favorite text editor and add the following content:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:166
msgid ""
"Here you simply define one default ``ComplexData`` for both ``inputData`` "
"and ``Result``: a GML and a GeoJSON respectively [#f7]_."
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:176
msgid ""
"Open a file named ``~/zoo-ws2013/jschains/cgi-env/foss4gws.js`` and add the "
"following content:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:262
msgid ""
"Now you are ready to use your JavaScript service by loading the following "
"`url <http://localhost/zoows2013-demo/spatialtools.html>`__, click on a "
"street then click on the \"Mask\" button."
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:282
msgid ""
"Open the file named ``~/zoo-ws2013/jschains/cgi-env/BufferMask.zcfg`` with "
"your favorite text editor and copy / paste the following content:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:388
#: ../../workshop/2013/js_services_chaining.txt:512
msgid ""
"Now, you can publish your service as you did `before <#publish-your-"
"service>`__. To use your service, please use the following `url "
"<http://localhost/zoows2013-demo/spatialtools.html>`__."
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:395
msgid ""
"In this section, you will create a new Service: ``BufferRequest`` which will"
" request POIs included in the Buffer around a selected feature [#f8]_. You "
"will use the ``poi`` layer served as WFS through your local mapserver "
"installation. You can see in the following screenshot the expected result:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:407
msgid ""
"Open the file named ``~/zoo-ws2013/jschains/cgi-env/BufferRequest.zcfg`` "
"with your favorite text editor and copy / paste the following content:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:521
msgid "Add Union into the chain"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:523
msgid ""
"As you can see in the following screenshot, when using the Buffer service "
"using a feature collection containing more than one geometry, the result is "
"made of multiple geometries. So, running Buffer service on the routing "
"interface will result in multiple buffer:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:532
msgid ""
"So, to get the same result as you got when selecting a single road, you "
"should use Union of geometry (input or the one outputed by the ``Buffer`` "
"Service). As you are using the JavaScript ZOO-API, you can simply update the"
" ``Buffer`` JavaScript function you defined earlier, to first call the Union"
" of each geometry avaible in a feature collection prior to request (or after"
" requesting) the Buffer Service. Hopefully, there is already this Python "
"Service available, its name is ``UnionOne1``, so you just need to add it in "
"your Service chain."
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:541
msgid "Here is the final code for the Buffer JavaScript function:"
msgstr ""

#: ../../workshop/2013/js_services_chaining.txt:589
msgid ""
"You can also return a conf Object if you get any informations updated from "
"your JavaScript service (such as cookie for instance)"
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:12
msgid "ZOO-Project Installation"
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:14
msgid ""
"To be able to follow the current material, you will have to download and "
"uncompress an archive containing the dataset, ZOO-Kernel and required "
"services. It was made available specifically for this workshop and is "
"available at : http://www.zoo-project.org/dl/ws2013-1.tar.bz2."
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:19
msgid ""
"You should use the following commands to download then uncompress the "
"archive and get it extracted with correct privileges:"
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:31
msgid ""
"As already said in introduction, an OSGeoLive has been booted on your "
"computer, allowing you to use ZOO-Kernel in a development environment "
"directly."
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:36
msgid ""
"General ZOO-Kernel settings are set in the ``main.cfg`` file located in the "
"same directory as the ZOO-Kernel, so in ``/usr/lib/cgi-bin/``. You can see a"
" typical ``main.cfg`` content in the following:"
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:97
msgid ""
"Obviously, you are free to add new sections to this file if you need more. "
"Nevertheless, you have to know that there is some specific names you should "
"use only for specific needs: ``[headers]``, ``[mapserver]``, ``[env]``, "
"``[lenv]`` and ``[senv]``."
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:103
msgid ""
"The ``headers`` section is used to define your own HTTP Response headers. "
"You may take a look at headers returned by web site such as http://www.zoo-"
"project.org by using curl command line tool for instance and notice the "
"specific heder ``X-Powered-By: Zoo-Project@Trac``."
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:108
msgid ""
"There is no reason to define basic headers such as ``Content-Type`` or "
"``encoding`` as they will be overwritten at runtime by the ZOO-Kernel."
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:112
msgid ""
"The ``mapserver`` section is used to store specific mapserver configuration "
"parameter such as PROJ_LIB and GDAL_DATA or any other you want to be set to "
"make your MapServer working."
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:116
msgid "the ``mapserver`` section is mainly used on WIN32 platform"
msgstr ""

#: ../../workshop/2013/using_zoo_from_osgeolivevm.txt:134
msgid ""
"The ``senv`` is used to store session informations on the server side. You "
"can then access them automatically from service if the server is requested "
"using a valid cookie (as defined in ``lenv > cookie``). The ZOO-Kernel will "
"store on disk the values set in the ``senv`` maps, then load it and "
"dynamically add its content to the one available in the ``main.cfg``. The "
"``senv`` section should contain at least:"
msgstr ""
