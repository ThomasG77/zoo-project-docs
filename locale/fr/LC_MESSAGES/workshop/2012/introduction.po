# 
msgid ""
msgstr ""
"Project-Id-Version: ZOO Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-24 19:27+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../workshop/2012/introduction.txt:5
msgid "Introduction"
msgstr ""

#: ../../workshop/2012/introduction.txt:0
msgid "Table of Contents"
msgstr ""

#: ../../workshop/2012/introduction.txt:12
msgid "What is ZOO ?"
msgstr ""

#: ../../workshop/2012/introduction.txt:14
msgid ""
"ZOO-Project is a WPS (Web Processing Service) open source project released "
"under a `MIT/X-11 <http://zoo-project.org/trac/wiki/Licence>`__ style "
"license. It provides an OGC WPS compliant developer-friendly framework to "
"create and chain WPS Web services. ZOO is made of three parts:"
msgstr ""

#: ../../workshop/2012/introduction.txt:16
msgid ""
"`ZOO Kernel <http://zoo-project.org/docs/kernel/index.html#kernel>`__ : A "
"powerful server-side C Kernel which makes it possible to manage and chain "
"Web services coded in different programming languages."
msgstr ""

#: ../../workshop/2012/introduction.txt:17
msgid ""
"`ZOO Services <http://zoo-project.org/docs/services/index.html#services>`__ "
": A growing suite of example Web Services based on various open source "
"libraries."
msgstr ""

#: ../../workshop/2012/introduction.txt:18
msgid ""
"`ZOO API <http://zoo-project.org/docs/api/index.html#api>`__ : A server-side"
" JavaScript API able to call and chain the ZOO Services, which makes the "
"development and chaining processes easier and faster."
msgstr ""

#: ../../workshop/2012/introduction.txt:20
msgid ""
"ZOO was designed to make the service creation and deployment easy, by "
"providing a powerful system able to understand and execute WPS compliant "
"queries. It supports seven programming languages, thus allowing you to "
"create Web Services using the one you prefer. It also lets you use an "
"existing code and to turn it as a WPS Service. The current supported "
"programming languages are the following:"
msgstr ""

#: ../../workshop/2012/introduction.txt:23
msgid "C/C++"
msgstr ""

#: ../../workshop/2012/introduction.txt:24
msgid "Python"
msgstr ""

#: ../../workshop/2012/introduction.txt:25
msgid "Perl"
msgstr ""

#: ../../workshop/2012/introduction.txt:26
msgid "Java"
msgstr ""

#: ../../workshop/2012/introduction.txt:27
msgid "Fortran"
msgstr ""

#: ../../workshop/2012/introduction.txt:28
msgid "PHP"
msgstr ""

#: ../../workshop/2012/introduction.txt:29
msgid "JavaScript"
msgstr ""

#: ../../workshop/2012/introduction.txt:31
msgid ""
"More information on the project is available on the  `ZOO Project official "
"website <http://www.zoo-project.org/>`__ ."
msgstr ""

#: ../../workshop/2012/introduction.txt:34
msgid "How does ZOO works ?"
msgstr ""

#: ../../workshop/2012/introduction.txt:36
msgid ""
"ZOO is based on a C Kernel which is the ZOO-Project core system (aka ZOO-"
"Kernel). The latter is able to dynamically load libraries and to handle them"
" as on-demand Web services."
msgstr ""

#: ../../workshop/2012/introduction.txt:38
msgid ""
"A ZOO-Service is a link composed of a ZOO metadata file (.zcfg) and the code"
" for the corresponding implementation. The metadata file describes all the "
"available functions that can be called using a WPS Execute Request, as well "
"as the desired input/output. Services contain the algorithms and functions, "
"and can be implemented using any of the supported languages."
msgstr ""

#: ../../workshop/2012/introduction.txt:40
msgid ""
"ZOO-Kernel works as CGI through Apache and can communicate with cartographic"
" engines and Web mapping clients. It simply adds the WPS support to your "
"spatial data infrastructure and your webmapping applications. It can use "
"every GDAL/OGR supported formats as input data and create suitable vector or"
" raster output for your cartographic engine and/or your web-mapping client "
"application."
msgstr ""

#: ../../workshop/2012/introduction.txt:43
msgid "What are we going to do in this workshop?"
msgstr ""

#: ../../workshop/2012/introduction.txt:45
msgid ""
"Participants will then learn how to use ZOO Kernel and how to create ZOO "
"Services using the OSGeo Live 5.5 A pre-compiled ZOO 1.3-dev package is "
"provided inside OSGeoLive, so participants won't have to compile and install"
" it manually. Configuration file and basic ways to run ZOO Kernel and ZOO "
"Service will be presented. Participants will be then invited to start "
"programming their own service using Python language. Some ZOO Services will "
"be presented and individually tested inside a ready-to-use OpenLayers "
"application. Finally, this services will be chained using the server-side "
"Javascript ZOO API."
msgstr ""

#: ../../workshop/2012/introduction.txt:47
msgid ""
"The whole workshop is organized step-by-step and numerous code snippets are "
"available along with their respective explanations. The instructors will "
"check the ZOO Kernel functioning on each machine and will assist you while "
"coding. Technical questions are of course welcome during the workshop."
msgstr ""

#: ../../workshop/2012/introduction.txt:50
msgid "Usefull tips for reading"
msgstr ""

#: ../../workshop/2012/introduction.txt:56
msgid "This is a warning message."
msgstr ""

#: ../../workshop/2012/introduction.txt:58
msgid "This is an important note."
msgstr ""

#: ../../workshop/2012/introduction.txt:60
msgid "**Let's go !**"
msgstr ""
