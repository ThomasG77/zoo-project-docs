# 
msgid ""
msgstr ""
"Project-Id-Version: ZOO Project 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-01-23 23:51+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../kernel/index.txt:4
msgid "ZOO Kernel Documentation"
msgstr ""

#: ../../kernel/index.txt:6
msgid "The following sections will assist you with the ZOO Kernel:"
msgstr ""

#: ../../kernel/install-centos.txt:4
msgid "CentOS"
msgstr ""

#: ../../kernel/install-centos.txt:6 ../../kernel/install-mac.txt:6
#: ../../kernel/install-opensuse.txt:6 ../../kernel/install-windows.txt:6
#: ../../kernel/installation.txt:6 ../../kernel/introduction.txt:6
#: ../../kernel/mapserver.txt:6
msgid "Nicolas Bozon, Gérald Fenoy, Jeff McKenna"
msgstr ""

#: ../../kernel/install-centos.txt:7 ../../kernel/install-mac.txt:7
#: ../../kernel/install-opensuse.txt:7 ../../kernel/install-windows.txt:7
#: ../../kernel/installation.txt:7
msgid "$Date: 2011-12-07 14:44:57 +0100 (Wed, 07 Dec 2011) $"
msgstr ""

#: ../../kernel/install-centos.txt:0 ../../kernel/install-debian.txt:0
#: ../../kernel/install-mac.txt:0 ../../kernel/install-opensuse.txt:0
#: ../../kernel/install-prerequisites.txt:0 ../../kernel/install-unix.txt:0
#: ../../kernel/install-windows.txt:0 ../../kernel/mapserver.txt:0
msgid "Table of Contents"
msgstr ""

#: ../../kernel/install-centos.txt:14
msgid ""
"This documentation was created thanks to Guillaume Sueur from Neogeo "
"Technologies which took time to test installing the ZOO-Kernel on a CentOS "
"5.5 environment."
msgstr ""

#: ../../kernel/install-centos.txt:18 ../../kernel/install-mac.txt:105
msgid "Requirements"
msgstr ""

#: ../../kernel/install-centos.txt:20
msgid ""
"Install some standard tools to be able to run ZOO-Kernel on your platform :"
msgstr ""

#: ../../kernel/install-centos.txt:34
msgid "Compile then install FastCGI library from source"
msgstr ""

#: ../../kernel/install-centos.txt:46
msgid "Compile then install the autoconf tools :"
msgstr ""

#: ../../kernel/install-centos.txt:56
msgid "Compile then install the flex tool :"
msgstr ""

#: ../../kernel/install-centos.txt:67
msgid ""
"Using the curl provided in the CentOS distribution will produce a ZOO-Kernel"
" unable to run any Service. Indeed, some segmentation faults occur when "
"trying to run ``Execute`` requests on the ZOO-Kernel, compiling the ZOO-"
"Kernel setting ``USE_GDB`` flag in the ``CFLAGS`` of your ``Makefile`` will "
"let you run ZOO-Kernel from gdb and be able to get more information on what "
"is going wrong with your ZOO-Kernel. Doing this we can figure out that code "
"on `line 173 <http://zoo-project.org/trac/browser/trunk/zoo-"
"kernel/ulinet.c#L173>`__ and `line 175 <http://zoo-"
"project.org/trac/browser/trunk/zoo-kernel/ulinet.c#L175>`__ have to be "
"commented in the ``ulinet.c`` file to get a ZOO-Kernel working using the "
"curl available in CentOS (curl version 7.15.5). If you don't apply the "
"modification, you will get an error from a gdb session pointing segfault in "
"``Curl_cookie_clearall``."
msgstr ""

#: ../../kernel/install-centos.txt:77
msgid "You can optionally compile then install curl from source :"
msgstr ""

#: ../../kernel/install-centos.txt:88
msgid "Compile then install Python :"
msgstr ""

#: ../../kernel/install-centos.txt:99
msgid "Compile then install your own GDAL library :"
msgstr ""

#: ../../kernel/install-centos.txt:110
msgid ""
"Install the Sun JAVA SDK into ``/usr/share`` then use the following command "
"to ensure that the ``libjvm.so`` will be found at runtime from any context."
msgstr ""

#: ../../kernel/install-centos.txt:119
msgid "Compile ZOO-Kernel and ZOO-Services"
msgstr ""

#: ../../kernel/install-centos.txt:121
msgid "Compile then install ZOO-Kernel and your first ZOO-Services."
msgstr ""

#: ../../kernel/install-centos.txt:123
msgid ""
"First of all, compile the cgic library providen in the SVN source tree:"
msgstr ""

#: ../../kernel/install-centos.txt:131
msgid "Compile then install ZOO-Kernel."
msgstr ""

#: ../../kernel/install-centos.txt:141
msgid ""
"Compile then deploy your first ZOO-ServicesProviders (simple HelloPy, line 1"
" and 2, and the OGR base-vect-ops ServiceProvider, line 3 to 6):"
msgstr ""

#: ../../kernel/install-centos.txt:153
msgid ""
"To ensure that the ``libjvm.so`` will be found from apache, please restart "
"it :"
msgstr ""

#: ../../kernel/install-centos.txt:160
msgid "Testing your ZOO-Kernel"
msgstr ""

#: ../../kernel/install-centos.txt:162
msgid "Test your ZOO-Kernel from command line:"
msgstr ""

#: ../../kernel/install-debian.txt:4
msgid "Debian / Ubuntu"
msgstr ""

#: ../../kernel/install-debian.txt:6 ../../kernel/install-prerequisites.txt:6
#: ../../kernel/install-unix.txt:6
msgid "Nicolas Bozon, Gérald Fenoy, Jeff McKenna, Luca Delucchi"
msgstr ""

#: ../../kernel/install-debian.txt:7
msgid "$Date: 2013-06-21 18:55:49 +0200 (Fri, 21 Jun 2013) $"
msgstr ""

#: ../../kernel/install-debian.txt:14
msgid ""
"An Ubuntu 10.4 with ZOO virtual image is available at http://www.zoo-"
"project.org/Ubuntu10.4_ZOO.zip (root: ZOO.test)"
msgstr ""

#: ../../kernel/install-debian.txt:18
msgid "Ubuntu 12.04 dependencies"
msgstr ""

#: ../../kernel/install-debian.txt:20
msgid "install default dependencies"
msgstr ""

#: ../../kernel/install-debian.txt:26
msgid "add ubuntugis repository to obtain the newer GIS libraries"
msgstr ""

#: ../../kernel/install-debian.txt:34
msgid "install geographic library"
msgstr ""

#: ../../kernel/install-debian.txt:40
msgid "download ZOO  source"
msgstr ""

#: ../../kernel/install-debian.txt:43
msgid "Debian 7.0 dependencies"
msgstr ""

#: ../../kernel/install-debian.txt:45
msgid "install dependencies"
msgstr ""

#: ../../kernel/install-debian.txt:53
msgid "Installation Workflow"
msgstr ""

#: ../../kernel/install-debian.txt:55
msgid ""
"In the following lines you will find ``as administrator user`` note, on "
"Ubuntu you have to add ``sudo`` at the beginning of line, on Debian you can "
"use ``su -c COMMAND``)"
msgstr ""

#: ../../kernel/install-debian.txt:63
msgid "install cgic from packages"
msgstr ""

#: ../../kernel/install-debian.txt:69 ../../kernel/install-debian.txt:99
msgid "compile"
msgstr ""

#: ../../kernel/install-debian.txt:75
msgid ""
"if you want use Mapserver (optional) for WMS, WFS and WCS output read "
":ref:`mapserver`"
msgstr ""

#: ../../kernel/install-debian.txt:77
msgid "go to kernel path"
msgstr ""

#: ../../kernel/install-debian.txt:83
msgid "create configure file"
msgstr ""

#: ../../kernel/install-debian.txt:89
msgid "run configure"
msgstr ""

#: ../../kernel/install-debian.txt:95
msgid ""
"For PHP, you must make sure to compile PHP with `--enable-embed <http://www"
".zoo-"
"project.org/trac/wiki/ZooKernel/Embed/PHP#ConfigureandInstallPHPEmbedlibrary>`__."
msgstr ""

#: ../../kernel/install-debian.txt:97
msgid ""
"To use MapServer add the option ``--with-"
"mapserver=/path/to/mapserver/source``"
msgstr ""

#: ../../kernel/install-debian.txt:105
msgid "copy necessary files into your cgi-bin (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:113
msgid ""
"install ZOO ServiceProvider, in this case we try Python service (as "
"administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:120
msgid "change some information in the main.cfg (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:128
msgid "try the installation"
msgstr ""

#: ../../kernel/install-debian.txt:130
msgid ""
"http://127.0.0.1/cgi-"
"bin/zoo_loader.cgi?ServiceProvider=&metapath=&Service=WPS&Request=GetCapabilities&Version=1.0.0"
msgstr ""

#: ../../kernel/install-debian.txt:131
msgid ""
"http://127.0.0.1/cgi-"
"bin/zoo_loader.cgi?ServiceProvider=&metapath=&Service=WPS&Request=DescribeProcess&Version=1.0.0&Identifier=HelloPy"
msgstr ""

#: ../../kernel/install-debian.txt:132
msgid ""
"http://127.0.0.1/cgi-"
"bin/zoo_loader.cgi?ServiceProvider=&metapath=&Service=WPS&Request=Execute&Version=1.0.0&Identifier=HelloPy&DataInputs=a=myname"
msgstr ""

#: ../../kernel/install-debian.txt:135
msgid ""
"If you have some problem in the execute request using Python service, add "
"the following to ``main.cfg``:"
msgstr ""

#: ../../kernel/install-debian.txt:144
msgid "Rewrite rule configuration"
msgstr ""

#: ../../kernel/install-debian.txt:146
msgid ""
"for better readability and fully functional ZOO Kernel, you have to modify "
"the default Apache configuration in order to be able to use the "
"http://localhost/zoo/ url directly. Run (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:155
msgid ""
"first, please create a ``zoo`` directory in ``/var/www/`` which is used by "
"Apache as the DocumentRoot (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:162
msgid ""
"Then, please edit the ``/etc/apache2/sites-available/default`` configuration"
" file and add the following lines after the Directory block related to "
"/var/www directory (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:174
msgid ""
"now create a small .htaccess file in the ``/var/www/zoo`` containing the "
"following lines (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:184
msgid ""
"for this last file to be taken into account by Apache, you must activate the"
" rewrite Apache module by copying a load file as bellow (as administrator "
"user)"
msgstr ""

#: ../../kernel/install-debian.txt:191
msgid "or using the a2enmod tool this way (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:197
msgid ""
"now you should be able to access the ZOO Kernel using a simplified by "
"restarting your Apache Web server (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:201
msgid "::"
msgstr ""

#: ../../kernel/install-debian.txt:201
msgid "/etc/init.d/apache2 restart"
msgstr ""

#: ../../kernel/install-debian.txt:203
msgid "now you can try:"
msgstr ""

#: ../../kernel/install-debian.txt:205
msgid ""
"http://localhost/zoo/?Service=WPS&Request=GetCapabilities&Version=1.0.0"
msgstr ""

#: ../../kernel/install-debian.txt:206
msgid ""
"http://localhost/zoo/?Service=WPS&Request=DescribeProcess&Version=1.0.0&Identifier=HelloPy"
msgstr ""

#: ../../kernel/install-debian.txt:207
msgid ""
"http://localhost/zoo/?Service=WPS&Request=Execute&Version=1.0.0&Identifier=HelloPy&DataInputs=a=myname"
msgstr ""

#: ../../kernel/install-debian.txt:212
msgid "Compile MapServer"
msgstr ""

#: ../../kernel/install-debian.txt:214
msgid "install MapServer dependencies (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:220
msgid "extract MapServer from git repository"
msgstr ""

#: ../../kernel/install-debian.txt:229
msgid "now compile MapServer"
msgstr ""

#: ../../kernel/install-debian.txt:236
msgid "now install MapServer (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:242
msgid "now add path to libraries path (as administrator user)"
msgstr ""

#: ../../kernel/install-debian.txt:249
msgid "run as administrator"
msgstr ""

#: ../../kernel/install-mac.txt:4
msgid "Mac OS X"
msgstr ""

#: ../../kernel/install-mac.txt:14
msgid "Using the Installer"
msgstr ""

#: ../../kernel/install-mac.txt:16
msgid ""
"To install a default build of the ZOO-Project on your Mac OS X computer use "
"the `installer <http://www.zoo-project.org/trac/raw-"
"attachment/wiki/ZooDocumentation/ZOOKernel/MacOSX_installation/ZOO-Project-"
"Installer.pkg>`__."
msgstr ""

#: ../../kernel/install-mac.txt:19
msgid ""
"The installer assumes that you are using the distributed Apache2 version "
"that comes with your Mac.  The installer will place ZOO-Kernel and ZOO-"
"Services into your cgi-bin at ``/Library/WebServer/CGI-Executables``, and "
"the zoo-demo folder will be placed within your document root at "
"``/Library/WebServer/Documents``"
msgstr ""

#: ../../kernel/install-mac.txt:23
msgid ""
"Make sure that your Apache server is running, and then access the ZOO "
"Project Demo at:"
msgstr ""

#: ../../kernel/install-mac.txt:25
msgid "http://localhost/zoo-demo/spatialtools.html"
msgstr ""

#: ../../kernel/install-mac.txt:27
msgid ""
"To add additional services, please follow the following intructions to "
"compile your own ZOO Project instance."
msgstr ""

#: ../../kernel/install-mac.txt:30
msgid "Compiling from Source"
msgstr ""

#: ../../kernel/install-mac.txt:32
msgid "Install `Xcode <http://developer.apple.com/technologies/tools/>`__."
msgstr ""

#: ../../kernel/install-mac.txt:34
msgid ""
"Before you start downloading the ZOO-Project source code, you'll need to "
"install some tools required to compile ZOO-Kernel properly."
msgstr ""

#: ../../kernel/install-mac.txt:37
msgid ""
"First of all install PROJ, GEOS and GDAL frameworks from `here "
"<http://www.kyngchaos.com/software/frameworks>`__."
msgstr ""

#: ../../kernel/install-mac.txt:39
msgid ""
"At this step, you should get the following directories on your local hard "
"drive :"
msgstr ""

#: ../../kernel/install-mac.txt:47
msgid ""
"Then, create a ``src`` directory and inside that directory download the "
"`gettext source code "
"<http://www.gnu.org/software/gettext/#TOCdownloading>`__ and uncompress it."
msgstr ""

#: ../../kernel/install-mac.txt:49
msgid ""
"now, compile gettext with the following commands to produce a universal "
"binary :"
msgstr ""

#: ../../kernel/install-mac.txt:59
msgid "Compile and install your ZOO-Kernel"
msgstr ""

#: ../../kernel/install-mac.txt:61
msgid ""
"Download source from SVN, and use the following command to compile libcgic :"
msgstr ""

#: ../../kernel/install-mac.txt:69
msgid ""
"If you produced the ``libcgic.a`` file, you can run ``autoconf`` and then "
"``configure`` from zoo-kernel directory."
msgstr ""

#: ../../kernel/install-mac.txt:78
msgid ""
"Obviously, if you don't need Python or Java support then you should remove "
"the corresponding configure option."
msgstr ""

#: ../../kernel/install-mac.txt:81
msgid ""
"Note that we used the --with-java=macos configure option. Due to the generic"
" location of the JDK on all Mac OS X platforms, you don't have to provide "
"its full path."
msgstr ""

#: ../../kernel/install-mac.txt:84
msgid ""
"Now, run the following commands to compile and deploy your ZOO-Kernel on "
"your Apache server :"
msgstr ""

#: ../../kernel/install-mac.txt:91
msgid ""
"You should be ready to request your ZOO-Kernel installation using the "
"following link :  http://localhost/cgi-"
"bin/zoo_loader.cgi?request=GetCapabilities&service=WPS ."
msgstr ""

#: ../../kernel/install-mac.txt:93
msgid ""
"If everything is ok, you can follow the next steps to deploy new Services "
"Providers."
msgstr ""

#: ../../kernel/install-mac.txt:96
msgid ""
"If you are using your own libs (not the default libs on your system) then "
"you must take care to create universal versions of those libs, as the ZOO-"
"Kernel will try to create a universal binary.  If you are not following this"
" advice, you might receive compile errors of ``symbol(s) not found for "
"architecture ppc`` or ``file was built for unsupported file format which is "
"not the architecture being linked (ppc)``."
msgstr ""

#: ../../kernel/install-mac.txt:102
msgid "Deploy the OGR Services Provider"
msgstr ""

#: ../../kernel/install-mac.txt:107
msgid ""
"Before your try to use any service, please set the correct path in the "
"``main.cfg`` for tmpPath and tmpUrl."
msgstr ""

#: ../../kernel/install-mac.txt:109
msgid "You can use the following setup :"
msgstr ""

#: ../../kernel/install-mac.txt:116
msgid ""
"Obviously you'll then need to create this directory, using the following "
"command :"
msgstr ""

#: ../../kernel/install-mac.txt:123
msgid "C Version"
msgstr ""

#: ../../kernel/install-mac.txt:125
msgid ""
"To compile the base-vect-ops ServicesProvider you'll need to edit the "
"Makefile in *zoo/zoo-services/ogr/base-vect-ops/* directory. Add "
"\"-I/Library//Frameworks/GEOS.framework/Versions/3/Headers/\" to the CFLAGS "
"value on the first line. To compile, add GDAL framework to the PATH "
"environmenet variable, to ensure that gdal-config tool will be found, run "
"make and then copy cgi-env files in the /Library/WebServer/CGI-Executables "
"directory."
msgstr ""

#: ../../kernel/install-mac.txt:137
msgid ""
"You can test using this `url <http://localhost/cgi-"
"bin/zoo_loader.cgi?request=Execute&service=WPS&version=1.0.0&Identifier=Buffer&DataInputs=BufferDistance=1@datatype=interger;InputPolygon=Reference@xlink:href=http%3A%2F%2Fwww"
".zoo-"
"project.org%3A8082%2Fgeoserver%2Fows%3FSERVICE%3DWFS%26REQUEST%3DGetFeature%26VERSION%3D1.0.0%26typename%3Dtopp%3Astates%26SRS%3DEPSG%3A4326%26FeatureID%3Dstates.15>`__"
" if everything is ok with your setup."
msgstr ""

#: ../../kernel/install-mac.txt:141
msgid "Python Version"
msgstr ""

#: ../../kernel/install-mac.txt:143
msgid "**Requirements**"
msgstr ""

#: ../../kernel/install-mac.txt:145
msgid ""
"First of all run python from a Terminal.app and try the following import "
"from the python interpreter :"
msgstr ""

#: ../../kernel/install-mac.txt:152
msgid ""
"If you get an issue when importing the libxml2 module from your python "
"interpreter then that means you need to install the Python support for the "
"libxml2 library which is already installed on your Mac OS X environment. To "
"accomplish this, you have first to determine what version of libxml2 is "
"installed on your platform, using the following command:"
msgstr ""

#: ../../kernel/install-mac.txt:156
msgid "xml2-config --version"
msgstr ""

#: ../../kernel/install-mac.txt:158
msgid ""
"Download the source corresponding to your version (i.e. on 10.6.6 you get "
"2.7.3) from the libxml2 `download page <ftp://xmlsoft.org/libxml2/>`__ into "
"your ``src`` directory then uncompress it."
msgstr ""

#: ../../kernel/install-mac.txt:161
msgid "Use the following command to install the python support :"
msgstr ""

#: ../../kernel/install-mac.txt:168
msgid "**Deploy OGR Python Services Provider**"
msgstr ""

#: ../../kernel/install-mac.txt:170
msgid ""
"Now copy the ``zoo-services/ogt/base-vect-ops/cgi-env`` files into "
"``/Library/WebServer/CGI-Executables``."
msgstr ""

#: ../../kernel/install-mac.txt:172
msgid ""
"You can test using this `url <http://localhost/cgi-"
"bin/zoo_loader.cgi?request=Execute&service=WPS&version=1.0.0&Identifier=BufferPy&DataInputs=BufferDistance=1@datatype=interger;InputPolygon=Reference@xlink:href=http%3A%2F%2Fwww"
".zoo-"
"project.org%3A8082%2Fgeoserver%2Fows%3FSERVICE%3DWFS%26REQUEST%3DGetFeature%26VERSION%3D1.0.0%26typename%3Dtopp%3Astates%26SRS%3DEPSG%3A4326%26FeatureID%3Dstates.15>`__"
" if everything is ok with your setup."
msgstr ""

#: ../../kernel/install-mac.txt:176
msgid "Test using Local Demo Page"
msgstr ""

#: ../../kernel/install-mac.txt:178
msgid ""
"Download the `OpenLayers <http://openlayers.org>`__ library and uncompress "
"it in your personal Sites directory (located in your home directory)."
msgstr ""

#: ../../kernel/install-mac.txt:181
msgid "Rename the OpenLayers directory as openlayers."
msgstr ""

#: ../../kernel/install-mac.txt:183
msgid ""
"Download this `zip archive <http://www.zoo-project.org/trac/raw-"
"attachment/wiki/ZooDocumentation/ZOOKernel/MacOSX_installation/zoo-"
"demo.zip>`__ and then uncompress it in your personal Sites directory."
msgstr ""

#: ../../kernel/install-mac.txt:186
msgid ""
"Load your local demo pages using urls similar to the following (replacing "
"MyUserName by your MacOS user name) :"
msgstr ""

#: ../../kernel/install-mac.txt:188
msgid "http://localhost/~MyUserName/zoo-demo/spatialtools.html"
msgstr ""

#: ../../kernel/install-mac.txt:189
msgid "http://localhost/~MyUserName/zoo-demo/spatialtools-py.html"
msgstr ""

#: ../../kernel/install-opensuse.txt:4
msgid "OpenSUSE"
msgstr ""

#: ../../kernel/install-opensuse.txt:13
msgid ""
"Zoo-Kernel is maintained as a package in `OpenSUSE Build Service (OBS) "
"<https://build.opensuse.org/package/show?package=zoo-"
"kernel&project=Application%3AGeo>`__. This way, rpm's are provided for all "
"versions of openSUSE Linux (11.2, 11.3, 11.4, Factory)."
msgstr ""

#: ../../kernel/install-opensuse.txt:17
msgid "Stable Releases"
msgstr ""

#: ../../kernel/install-opensuse.txt:19
msgid "For installing Zoo-Kernel in openSUSE there are 3 ways available:"
msgstr ""

#: ../../kernel/install-opensuse.txt:22
msgid "One Click Installer"
msgstr ""

#: ../../kernel/install-opensuse.txt:24
msgid ""
"One-click installer that can be found  `here "
"<http://software.opensuse.org/search?q=zoo-"
"kernel&baseproject=openSUSE%3A11.4&lang=en&exclude_debug=true>`__. For "
"openSUSE 11.4 this is the direct `link "
"<http://software.opensuse.org/ymp/Application:Geo/openSUSE_11.4/zoo-"
"kernel.ymp?base=openSUSE%3A11.4&query=zoo-kernel>`__."
msgstr ""

#: ../../kernel/install-opensuse.txt:28
msgid "Yast Software Manager using a GUI"
msgstr ""

#: ../../kernel/install-opensuse.txt:30
msgid ""
"The `Application:Geo "
"<http://download.opensuse.org/repositories/Application:/Geo/>`__ repository "
"has to be added to the Software Repositories and then Zoo-kernel can be "
"found in Software Management through search."
msgstr ""

#: ../../kernel/install-opensuse.txt:34
msgid "Command line (as root for openSUSE 11.4)"
msgstr ""

#: ../../kernel/install-opensuse.txt:43
msgid "Unstable Version"
msgstr ""

#: ../../kernel/install-opensuse.txt:45
msgid ""
"The latest development version of ZOO-Kernel can be found in OBS under the "
"project `home:tzotsos "
"<https://build.opensuse.org/project/show?project=home%3Atzotsos>`__. ZOO-"
"Kernel packages are maintained and tested there before being released to the"
" Application:Geo repository."
msgstr ""

#: ../../kernel/install-opensuse.txt:48
msgid ""
"Installation methods are identical as the stable version. Make sure to use "
"`this <http://download.opensuse.org/repositories/home:/tzotsos/>`__ "
"repository instead."
msgstr ""

#: ../../kernel/install-opensuse.txt:51
msgid "Command line installation (as root for openSUSE 11.4)"
msgstr ""

#: ../../kernel/install-opensuse.txt:60
msgid ""
"Additionally, there is the option of adding the zoo-wps-grass-bridge "
"package. This option will automatically install grass7 (svn trunk)."
msgstr ""

#: ../../kernel/install-opensuse.txt:63
msgid "Try the Installation"
msgstr ""

#: ../../kernel/install-opensuse.txt:65
msgid ""
"http://localhost/cgi-"
"bin/zoo_loader.cgi?ServiceProvider=&metapath=&Service=WPS&Request=GetCapabilities&Version=1.0.0"
msgstr ""

#: ../../kernel/install-opensuse.txt:66
msgid ""
"http://localhost/cgi-"
"bin/zoo_loader.cgi?ServiceProvider=&metapath=&Service=WPS&Request=DescribeProcess&Version=1.0.0&Identifier=HelloPy"
msgstr ""

#: ../../kernel/install-opensuse.txt:67
msgid ""
"http://localhost/cgi-"
"bin/zoo_loader.cgi?ServiceProvider=&metapath=&Service=WPS&Request=Execute&Version=1.0.0&Identifier=HelloPy&DataInputs=a=myname"
msgstr ""

#: ../../kernel/install-prerequisites.txt:4
#: ../../kernel/install-prerequisites.txt:35
msgid "Prerequisites"
msgstr ""

#: ../../kernel/install-prerequisites.txt:7
msgid "$Date: 2013-03-28 10:26:04 +0100 (Thu, 28 Mar 2013) $"
msgstr ""

#: ../../kernel/install-prerequisites.txt:14
msgid "Obtaining the ZOO Kernel Source"
msgstr ""

#: ../../kernel/install-prerequisites.txt:18
msgid ""
"Use the following command to get the ZOO Kernel source code through "
"Subversion:"
msgstr ""

#: ../../kernel/install-prerequisites.txt:24
msgid "For users which get a developer account, use the following:"
msgstr ""

#: ../../kernel/install-prerequisites.txt:31
msgid ""
"The first line of the instruction above defines a specific tunnel to access "
"the svn server through the SSH protocol. Indeed, the ZOO SVN server listens "
"on the 1046 (1024+22) port rather than the default one (22)."
msgstr ""

#: ../../kernel/install-prerequisites.txt:37
msgid ""
"The following libraries are required on your system before you can install "
"the ZOO Kernel:"
msgstr ""

#: ../../kernel/install-prerequisites.txt:39
msgid "autoconf (  http://www.gnu.org/software/autoconf/ )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:40
msgid "cgic (  http://www.boutell.com/cgic )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:41
msgid "cURL (  http://curl.haxx.se )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:42
msgid "FastCGI (  http://www.fastcgi.com )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:43
msgid ""
"Flex & Bison (  http://flex.sourceforge.net/  "
"http://www.gnu.org/software/bison/ )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:44
msgid "libxml2 (  http://xmlsoft.org )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:45
msgid "OpenSSL (  http://www.openssl.org )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:46
msgid "Python (  http://www.python.org )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:48
msgid "Optional libraries include:"
msgstr ""

#: ../../kernel/install-prerequisites.txt:50
msgid ""
"MapServer (optional for WMS, WFS and WCS output) ( http://mapserver.org )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:51
msgid "PHP Embedded (optional) (  http://www.php.net )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:52
msgid "Java SDK (optional) (  http://java.sun.com )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:53
msgid "SpiderMonkey (optional) (  http://www.mozilla.org/js/spidermonkey/ )"
msgstr ""

#: ../../kernel/install-prerequisites.txt:56
msgid "Compile libcgic"
msgstr ""

#: ../../kernel/install-prerequisites.txt:58
msgid ""
"The first step is to compile libcgic from the ``zoo-project/thirds`` "
"directory. For such a task, please use the following command:"
msgstr ""

#: ../../kernel/install-prerequisites.txt:66
msgid ""
"Make sure that a ``libcgic.a`` is created in your ``zoo-"
"project/thirds/cgic206`` directory. If yes, then you can go to the next "
"step."
msgstr ""

#: ../../kernel/install-prerequisites.txt:69
msgid "On Windows, rather than using the make command, please use:"
msgstr ""

#: ../../kernel/install-prerequisites.txt:76
msgid ""
"If you don't compile libcgic first, and try to compile the ZOO Kernel, you "
"will get an error such as *cannot find -lcgic*"
msgstr ""

#: ../../kernel/install-unix.txt:4
msgid "Unix"
msgstr ""

#: ../../kernel/install-unix.txt:7
msgid "$Date: 2013-03-28 15:10:57 +0100 (Thu, 28 Mar 2013) $"
msgstr ""

#: ../../kernel/install-unix.txt:14
msgid ""
"You must be sure to perform the :ref:`prerequisite steps <kernel-"
"installation-prereq>` before following this page."
msgstr ""

#: ../../kernel/install-unix.txt:17
msgid "For the impatient"
msgstr ""

#: ../../kernel/install-unix.txt:19
msgid ""
"To build the ``zoo_loader.cgi`` CGI program with the default options, cd to "
"the directory where you extracted the ZOO Kernel source code package and use"
" the following commands:"
msgstr ""

#: ../../kernel/install-unix.txt:29
msgid ""
"Unless something went wrong, you should have executables in the current "
"directory for the ``zoo_loader.cgi`` CGI program. You can copy the "
"``zoo_loader.cgi`` program and the ``main.cfg`` file to your HTTP server's "
"CGI directory and start using it."
msgstr ""

#: ../../kernel/install-unix.txt:33
msgid ""
"At this step your ZOO-Kernel should work. Nevertheless, don't forget to "
"correct the main.cfg settings to set ``tmpPath`` and ``tmpUrl`` to fit your "
"web server configuration."
msgstr ""

#: ../../kernel/install-unix.txt:37
msgid "Configure Options"
msgstr ""

#: ../../kernel/install-unix.txt:39
msgid ""
"Here is the list of available options as returned by *./configure --help*:"
msgstr ""

#: ../../kernel/install-unix.txt:62
msgid "All the options are described in more details below."
msgstr ""

#: ../../kernel/install-unix.txt:65
msgid "(Required) GDAL Support"
msgstr ""

#: ../../kernel/install-unix.txt:67
msgid ""
"If your gdal-config program is not found in your PATH then you can use the "
"``--with-gdal-config`` option to specify its location. For instance, let's "
"suppose that your gdal-config was installed in /usr/local/bin and this "
"directory is not in your PATH, then you can use the following command:"
msgstr ""

#: ../../kernel/install-unix.txt:77
msgid "(Required) XML2 Support"
msgstr ""

#: ../../kernel/install-unix.txt:79
msgid ""
"If your xml2-config program is not found in your PATH then you can use the "
"``--with-xml2config`` option to specify its location. For instance, let's "
"suppose that your xml2-config was installed in /usr/local/bin and this "
"directory is not in your PATH, then you can use the following command:"
msgstr ""

#: ../../kernel/install-unix.txt:89
msgid "(Optional) MapServer Support"
msgstr ""

#: ../../kernel/install-unix.txt:91
msgid ""
"If you want to activate the WMS, WFS and WCS outputs using MapServer then "
"you will have to use the ``--with-mapserver`` option. You have to set the "
"path to your ``mapserver-config`` locate in the source code of MapServer as "
"following command:"
msgstr ""

#: ../../kernel/install-unix.txt:100
msgid "(Optional) Python Support"
msgstr ""

#: ../../kernel/install-unix.txt:102
msgid ""
"If you want to activate Python support for the ZOO Kernel then you will have"
" to use the ``--with-python`` option. If your python-config program is found"
" in your PATH then you don't have to specify the path where Python was "
"installed, such as:"
msgstr ""

#: ../../kernel/install-unix.txt:110
msgid "This assumes that python-config is found in your PATH."
msgstr ""

#: ../../kernel/install-unix.txt:112
msgid ""
"In the case that your python-config is not found in your PATH, then you can "
"specify the Python installation directory you are using. For instance, let's"
" suppose that you installed Python in /usr/local, then you can use the "
"following command:"
msgstr ""

#: ../../kernel/install-unix.txt:120
msgid "This assumes that /usr/local/bin/python-config exists."
msgstr ""

#: ../../kernel/install-unix.txt:123
msgid "(Optional) Python Version"
msgstr ""

#: ../../kernel/install-unix.txt:125
msgid ""
"If you want use a specific version of Python you will have to use the "
"``--with-pyvers`` option. You can specify a Python version as:"
msgstr ""

#: ../../kernel/install-unix.txt:134
msgid "(Optional) PHP Support"
msgstr ""

#: ../../kernel/install-unix.txt:136
msgid ""
"To be able to activate PHP support for the ZOO Kernel you'll need to get a "
"local PHP Embedded installation; for more information about the required "
"configure options when compiling PHP you can refer to this page :"
msgstr ""

#: ../../kernel/install-unix.txt:140
msgid "http://zoo-project.org/trac/wiki/ZooKernel/Embed/PHP"
msgstr ""

#: ../../kernel/install-unix.txt:142
msgid ""
"If you want to activate the PHP support for the ZOO Kernel then you will "
"have to use the ``--with-php`` option. If your php-config program is found "
"in your PATH then you don't have to specify the path where PHP was "
"installed, then you can use the following commnd:"
msgstr ""

#: ../../kernel/install-unix.txt:150
msgid "This assumes that php-config is found in your PATH."
msgstr ""

#: ../../kernel/install-unix.txt:152
msgid ""
"In the case that your php-config is not found in your PATH, then you can "
"specify the PHP installation directory you are using. For instance, let's "
"suppose that you installed PHP in /usr/local, then you can use the following"
" command:"
msgstr ""

#: ../../kernel/install-unix.txt:160
msgid "This assumes that /usr/local/bin/php-config exists."
msgstr ""

#: ../../kernel/install-unix.txt:163
msgid "(Optional) Perl Support"
msgstr ""

#: ../../kernel/install-unix.txt:165
msgid ""
"If you want to activate Perl support for the ZOO Kernel then you will have "
"to use the ``--with-perl`` option. If you do not set any value to this "
"option, then the perl program will be searched in your PATH. So in such a "
"case, you can use the following command:"
msgstr ""

#: ../../kernel/install-unix.txt:173
msgid "This assumes that perl is found in your PATH."
msgstr ""

#: ../../kernel/install-unix.txt:175
msgid ""
"In the other case, for custom Perl installations, you can set the "
"installation directory. For instance, let's suppose that you installed Perl "
"in /usr/local and /usr/local/bin is not in your PATH, then you can use the "
"following command:"
msgstr ""

#: ../../kernel/install-unix.txt:183
msgid "This assumes that /usr/local/bin/perl exists."
msgstr ""

#: ../../kernel/install-unix.txt:186
msgid "(Optional) Java Support"
msgstr ""

#: ../../kernel/install-unix.txt:188
msgid ""
"If you want to activate Java support for the ZOO Kernel then you will have "
"to use the ``--with-java`` option and set the installation path of your Java"
" SDK. For instance, let's suppose that your Java SDK was installed in the "
"/usr/lib/jvm/java-6-sun-1.6.0.22/ directory, then you can use the following "
"command:"
msgstr ""

#: ../../kernel/install-unix.txt:197
msgid ""
"This assumes that the include/linux and jre/lib/i386/client/ subdirectories "
"exist in /usr/lib/jvm/java-6-sun-1.6.0.22/, include/linux contains the jni.h"
" headers file and jre/lib/i386/client/ contains the libjvm.so file."
msgstr ""

#: ../../kernel/install-unix.txt:202
msgid ""
"With Mac OS X you only have to set ``macos`` as the value for the ``--with-"
"java`` option to activate Java support. For example:"
msgstr ""

#: ../../kernel/install-unix.txt:210
msgid "(Optional) JavaScript Support"
msgstr ""

#: ../../kernel/install-unix.txt:212
msgid ""
"If you want to activate JavaScript support for the ZOO Kernel then you will "
"have to use the ``--with-js`` option. If you are using a \"Debian-like\" "
"GNU/Linux distribution then dpkg will be used to detect if the required "
"packages are installed and you don't have to specify anything here, so you "
"can use the following command:"
msgstr ""

#: ../../kernel/install-unix.txt:221
msgid ""
"This assumes that js_api.h and libmozjs.so are found in default directories."
msgstr ""

#: ../../kernel/install-unix.txt:223
msgid ""
"If you have a custom installation of SpiderMonkey or you are not using a "
"Debian packaging system, then you'll have to specify the directory where you"
" installed it. For instance, let's suppose that you installed your "
"SpiderMonkey in /usr, then you'll have to use the following command:"
msgstr ""

#: ../../kernel/install-unix.txt:232
msgid ""
"This assumes that the /usr/include/js exists and contains the js_api.h "
"headers file and /usr/lib contains libmozjs.so file."
msgstr ""

#: ../../kernel/install-windows.txt:4
msgid "Windows"
msgstr ""

#: ../../kernel/install-windows.txt:14
msgid "Using OSGeo4W"
msgstr ""

#: ../../kernel/install-windows.txt:17
msgid "Install OSGeo4W"
msgstr ""

#: ../../kernel/install-windows.txt:19
msgid ""
"Download the OSGeo4W installer from  http://trac.osgeo.org/osgeo4w/, and "
"install it with all the dependencies needed by your services (GDAL/OGR for "
"example). The following libs are required: FastCGI, libxml, Python, cURL."
msgstr ""

#: ../../kernel/install-windows.txt:23
msgid "Install other tools and libraries"
msgstr ""

#: ../../kernel/install-windows.txt:25
msgid ""
"After installing OSGeo4W on your platform you'll need more GNU tools and "
"libraries. `This package <http://www.zoo-project.org/dl/tool-win32.zip>`__ "
"contains full dependencies required to compile on WIN32 platform and this "
"one contains `full runtime dependencies to place <http://www.zoo-"
"project.org/dl/zoo-runtime.zip>`__ in your c:\\OSGeo4W\\bin."
msgstr ""

#: ../../kernel/install-windows.txt:30
msgid "Download and Install ZOO Kernel"
msgstr ""

#: ../../kernel/install-windows.txt:32
msgid ""
"Download the `binary version <http://www.zoo-"
"project.org/dl/zoo_loader.cgi>`__  of the ZOO Kernel for WIN32 then place it"
" in the ``C:\\OSGeo4W\\bin`` directory. Don't forget to place a ``main.cfg``"
" file in the same directory, you can use a modified copy of `this file "
"<http://www.zoo-project.org/trac/browser/trunk/zoo-kernel/main.cfg>`__."
msgstr ""

#: ../../kernel/install-windows.txt:37
msgid "Deploy ZOO Services Providers"
msgstr ""

#: ../../kernel/install-windows.txt:39
msgid ""
"Your can use the binary version of the OGR Services Provider available from "
"`here <http://www.zoo-project.org/dl/zoo-services-win32.zip>`__. Then place "
"the two libraries with their respective .zcfg files in your local "
"``C:\\OSGeo4W\\bin`` directory."
msgstr ""

#: ../../kernel/install-windows.txt:43
msgid "Testing"
msgstr ""

#: ../../kernel/install-windows.txt:45
msgid "Now you should be able to query your local ZOO Kernel."
msgstr ""

#: ../../kernel/install-windows.txt:48
msgid "Compiling Using Your Own Libraries"
msgstr ""

#: ../../kernel/install-windows.txt:51
msgid ""
"You must be sure to perform the :ref:`prerequisite steps <kernel-"
"installation-prereq>` before compiling the ZOO Kernel."
msgstr ""

#: ../../kernel/install-windows.txt:53
msgid ""
"The following steps are for use with the Microsoft Visual Studio compiler "
"(and tested with MSVC 2008)."
msgstr ""

#: ../../kernel/install-windows.txt:55
msgid ""
"Make sure the gnuwin32 tools ``bison.exe`` and ``flex.exe`` are found in "
"your path.  You can download the GNUwin32 tools `here <http://www.zoo-"
"project.org/dl/tool-win32.zip>`__."
msgstr ""

#: ../../kernel/install-windows.txt:57
msgid ""
"Modify the file ``zoo-project\\zoo-kernel\\nmake.opt`` to point to your "
"local libraries.  You can find a modified nmake.opt that points to local "
"libs `here <http://www.zoo-"
"project.org/trac/attachment/ticket/27/nmake.opt>`__. You can also find a "
"modified ``zoo-project\\zoo-kernel\\makefile.vc`` file `here <http://www"
".zoo-project.org/trac/attachment/ticket/27/makefile.vc>`__."
msgstr ""

#: ../../kernel/install-windows.txt:60
msgid "Execute:"
msgstr ""

#: ../../kernel/install-windows.txt:66
msgid ""
"A file ``zoo_loader.cgi`` should be created.  Note that if another file "
"named ``zoo_loader.cgi.manifest`` is also created, you will have to run "
"another command:"
msgstr ""

#: ../../kernel/install-windows.txt:73
msgid ""
"Copy the files ``zoo_loader.cgi`` and ``main.cfg`` into your cgi-bin "
"directory."
msgstr ""

#: ../../kernel/install-windows.txt:75
msgid ""
"Using the command prompt, test the zoo-kernel by executing the following "
"command:"
msgstr ""

#: ../../kernel/install-windows.txt:81
msgid "which should display a message such as:"
msgstr ""

#: ../../kernel/install-windows.txt:95
msgid ""
"Edit the file ``cgi-bin/main.cfg`` so that it contains values describing "
"your WPS service.  An example of such a file running on Windows is:"
msgstr ""

#: ../../kernel/install-windows.txt:130
msgid ""
"Open a web browser window, and execute a GetCapababilites request on your "
"WPS service: http://localhost/cgi-"
"bin/zoo_loader.cgi?request=GetCapabilities&service=WPS"
msgstr ""

#: ../../kernel/install-windows.txt:132
msgid "The response should be displayed in your browser, such as:"
msgstr ""

#: ../../kernel/install-windows.txt:152
msgid "Optionally Compile Individual Services"
msgstr ""

#: ../../kernel/install-windows.txt:154
msgid ""
"An example could be the ``OGR base-vect-ops`` provider in the ``zoo-project"
"\\zoo-services\\ogr\\base-vect-ops`` directory."
msgstr ""

#: ../../kernel/install-windows.txt:156
msgid "Edit the makefile.vc located in that directory, and execute:"
msgstr ""

#: ../../kernel/install-windows.txt:162
msgid ""
"Inside that same directory, the file ``cgi-env\\ogr_service.zo`` should be "
"created."
msgstr ""

#: ../../kernel/install-windows.txt:164
msgid ""
"Copy all of the files inside ``zoo-services\\ogr\\base-vect-ops\\cgi-env`` "
"into your cgi-bin directory"
msgstr ""

#: ../../kernel/install-windows.txt:166
msgid "Test this service provider through the following URL:"
msgstr ""

#: ../../kernel/install-windows.txt:168
msgid ""
"http://localhost/cgi-"
"bin/zoo_loader.cgi?request=Execute&service=WPS&version=1.0.0&Identifier=Buffer&DataInputs=BufferDistance=1@datatype=interger;InputPolygon=Reference@xlink:href=http%3A%2F%2Fwww"
".zoo-"
"project.org%3A8082%2Fgeoserver%2Fows%3FSERVICE%3DWFS%26REQUEST%3DGetFeature%26VERSION%3D1.0.0%26typename%3Dtopp%3Astates%26SRS%3DEPSG%3A4326%26FeatureID%3Dstates.15"
msgstr ""

#: ../../kernel/install-windows.txt:170
msgid "The response displayed in your browser should contain:"
msgstr ""

#: ../../kernel/installation.txt:4
msgid "Installation"
msgstr ""

#: ../../kernel/installation.txt:9
msgid ""
"This page provides documentation on how to compile then install the ZOO "
"Kernel on Unix, Windows, and Mac OS X platforms."
msgstr ""

#: ../../kernel/introduction.txt:4
msgid "Introduction"
msgstr ""

#: ../../kernel/introduction.txt:7
msgid "$Date: 2011-12-07 14:19:47 +0100 (Wed, 07 Dec 2011) $"
msgstr ""

#: ../../kernel/introduction.txt:9
msgid ""
"ZOO Kernel is the heart of the ZOO. It is a powerful server-side C Kernel "
"which makes it possible to manage and chain Web services, by loading dynamic"
" libraries and handling them as on-demand Web services. The ZOO Kernel is "
"written in the C language, but supports several common programming languages"
" in order to connect to numerous libraries and models."
msgstr ""

#: ../../kernel/introduction.txt:15
msgid "Using ZOO Kernel as a Web Processing Platform"
msgstr ""

#: ../../kernel/introduction.txt:17
msgid ""
"ZOO Kernel works with Apache and can communicate with cartographic engines "
"and Web mapping clients. It simply adds the WPS support to your spatial data"
" infrastructure and your Web mapping application!"
msgstr ""

#: ../../kernel/introduction.txt:22
msgid ""
"If you'd like some background on the WPS standard, head to: "
"http://www.opengeospatial.org/standards/wps"
msgstr ""

#: ../../kernel/introduction.txt:25
msgid "Supported Languages"
msgstr ""

#: ../../kernel/introduction.txt:27
msgid ""
"ZOO Kernel supports the following programming languages, and let's you use "
"them to create new ZOO Services from new or existing code:"
msgstr ""

#: ../../kernel/introduction.txt:31
msgid "**Language**"
msgstr ""

#: ../../kernel/introduction.txt:31
msgid "**ServiceProvider**"
msgstr ""

#: ../../kernel/introduction.txt:31
msgid "**DataStructure**"
msgstr ""

#: ../../kernel/introduction.txt:31
msgid "**Return**"
msgstr ""

#: ../../kernel/introduction.txt:33
msgid "C / C++"
msgstr ""

#: ../../kernel/introduction.txt:33 ../../kernel/introduction.txt:34
msgid "Shared Library"
msgstr ""

#: ../../kernel/introduction.txt:33
msgid "maps* M"
msgstr ""

#: ../../kernel/introduction.txt:33 ../../kernel/introduction.txt:34
#: ../../kernel/introduction.txt:35 ../../kernel/introduction.txt:36
#: ../../kernel/introduction.txt:37 ../../kernel/introduction.txt:38
msgid "integer"
msgstr ""

#: ../../kernel/introduction.txt:34
msgid "Fortran"
msgstr ""

#: ../../kernel/introduction.txt:34
msgid "CHARACTER*(1024) M(10,30)"
msgstr ""

#: ../../kernel/introduction.txt:35
msgid "Java"
msgstr ""

#: ../../kernel/introduction.txt:35
msgid "Class File"
msgstr ""

#: ../../kernel/introduction.txt:35
msgid "`HashMap`_"
msgstr ""

#: ../../kernel/introduction.txt:36
msgid "Python"
msgstr ""

#: ../../kernel/introduction.txt:36
msgid "Module File"
msgstr ""

#: ../../kernel/introduction.txt:36
msgid "`dictionary`_"
msgstr ""

#: ../../kernel/introduction.txt:37
msgid "PHP"
msgstr ""

#: ../../kernel/introduction.txt:37 ../../kernel/introduction.txt:38
msgid "Script File"
msgstr ""

#: ../../kernel/introduction.txt:37
msgid "`Array`_"
msgstr ""

#: ../../kernel/introduction.txt:38
msgid "Perl"
msgstr ""

#: ../../kernel/introduction.txt:39
msgid "JavaScript"
msgstr ""

#: ../../kernel/introduction.txt:39
msgid "Script file"
msgstr ""

#: ../../kernel/introduction.txt:39
msgid "`Object`_ or Array"
msgstr ""

#: ../../kernel/introduction.txt:39
msgid "Array/Object"
msgstr ""

#: ../../kernel/introduction.txt:48
msgid "ZOO Kernel is a WPS Espresso Machine"
msgstr ""

#: ../../kernel/mapserver.txt:4
msgid "How To Use the Internal MapServer W*S support"
msgstr ""

#: ../../kernel/mapserver.txt:7
msgid "$Date$"
msgstr ""

#: ../../kernel/mapserver.txt:9
msgid ""
"The key idea of the MapServer W*S support implementation is that it doesn't "
"require to change a single line of the service source code to activate the "
"automatic publication of your result as WMS/WFS or WCS ressource. You simply"
" need to modify the ``zcfg`` file corresponding to your service to make it "
"working."
msgstr ""

#: ../../kernel/mapserver.txt:15
msgid ""
"Here is an overview of the way to install the MapServer W*S support, the "
"configuration required and the internal mechanisms."
msgstr ""

#: ../../kernel/mapserver.txt:23
msgid "How to make it working ?"
msgstr ""

#: ../../kernel/mapserver.txt:26
msgid "Requirement"
msgstr ""

#: ../../kernel/mapserver.txt:28
msgid "last ZOO-Kernel trunk version"
msgstr ""

#: ../../kernel/mapserver.txt:29
msgid "MapServer version >= 6.0.1"
msgstr ""

#: ../../kernel/mapserver.txt:32
msgid "Installation steps"
msgstr ""

#: ../../kernel/mapserver.txt:34
msgid ""
"First download lastest zoo-kernel directory available on the svn, do that "
"from the directory of your previous checkout (so where zoo-api, zoo-services"
" and zoo-kernel directories are available), we will use ``<PREV_SVN_CO>`` "
"here for this directory:"
msgstr ""

#: ../../kernel/mapserver.txt:41
msgid ""
"Uncompress the MapServer archive (ie. ``mapserver-6.0.1.tar.bz2``) into "
"``/tmp/zoo-ms-src``, then compile MapServer using the following command:"
msgstr ""

#: ../../kernel/mapserver.txt:53
msgid ""
"Autotools was updated to add the ``--with-mapserver`` configure option. From"
" your ZOO-Project SVN trunk directory, compile the ZOO-Kernel using the "
"following command:"
msgstr ""

#: ../../kernel/mapserver.txt:64
msgid "Configuration steps"
msgstr ""

#: ../../kernel/mapserver.txt:67
msgid "Main configuration file"
msgstr ""

#: ../../kernel/mapserver.txt:70
msgid "Add the following content to your ``/usr/lib/cgi-bin/main.cfg`` file"
msgstr ""

#: ../../kernel/mapserver.txt:70
msgid "in the ``[main]`` section:"
msgstr ""

#: ../../kernel/mapserver.txt:77
msgid ""
"The ``dataPath`` directory should exists and be writable by apache user. In "
"this directory, a ``symbols.sym`` file have to be present, containing the "
"following:"
msgstr ""

#: ../../kernel/mapserver.txt:92
msgid ""
"Only one symbol definition is required with any name, used for WMS service "
"output."
msgstr ""

#: ../../kernel/mapserver.txt:94
msgid ""
"Now, your ZOO-Kernel get the MapServer support ready to be used. Note that "
"if you don't add the ``mapserverAddress`` then it imply the ZOO-Kernel will "
"segfault (checking ``NULL`` value should correct this behavior)."
msgstr ""

#: ../../kernel/mapserver.txt:96
msgid ""
"Here you can optionally add a ``msOgcVersion`` parameter to specify which "
"version of the OGC WebService you want to use for each services. For "
"example, if you want to force to version 1.0.0, you can set the following in"
" the ``[main]`` section of your ``main.cfg`` file:"
msgstr ""

#: ../../kernel/mapserver.txt:103
msgid "Service configuration file"
msgstr ""

#: ../../kernel/mapserver.txt:105
msgid ""
"To activate MapServer WebServices output for a service, you have to add a "
"specific parameter in the ``<Default>`` or ``<Supported>`` block: "
"``useMapserver``. This can take the value true or should not appear. If "
"true, it means that the output result is an OGR / GDAL compatible datasource"
" and you want it to be outputted as an OGC web server instance "
"(WMS/WFS/WCS)."
msgstr ""

#: ../../kernel/mapserver.txt:107
msgid ""
"You get an optional parameter, to use a custom MapServer style block (used "
"for vector datasource only): msStyle. For example:"
msgstr ""

#: ../../kernel/mapserver.txt:113
msgid ""
"You get the same optional parameter ``msOgcVersion`` as for the "
"``main.cfg``. This will specify that this is the specific protocol version "
"the service want to use (so you may set also locally to service rather than "
"globally)."
msgstr ""

#: ../../kernel/mapserver.txt:115
msgid ""
"When you add useMapserver option to an output ``<Default>`` or "
"``<Supported>`` block, then you have to know what are the sensible mimeType:"
msgstr ""

#: ../../kernel/mapserver.txt:117
msgid ""
"text/xml: will imply that the output data will be accessible through a WFS "
"GetFeature request (default protocol version 1.1.0)"
msgstr ""

#: ../../kernel/mapserver.txt:118
msgid ""
"image/tiff: will imply that the output data will be accessible through a WCS"
" GetCoverage request (default protocol version 2.0.0)"
msgstr ""

#: ../../kernel/mapserver.txt:119
msgid ""
"any other mimeType coupled with useMapserver option: will imply that the "
"output data will be accessible trhough a WMS GetMap request (you have to "
"limit yourself to what your MapServer installation support, GetCapabilities?"
" request give information of supported output mimeType) (default protocol "
"version 1.3.0)"
msgstr ""

#: ../../kernel/mapserver.txt:122
msgid "How does it work ?"
msgstr ""

#: ../../kernel/mapserver.txt:124
msgid ""
"Whatever your service return as default output ``mimeType``, this one will "
"be used when one output including the ``useMapserver`` option was found."
msgstr ""

#: ../../kernel/mapserver.txt:126
msgid ""
"So if you get the following ``<Default>`` and ``<Supported>`` blocks in the "
"ZOO Configuration File of your service:"
msgstr ""

#: ../../kernel/mapserver.txt:140
msgid ""
"It means that per default, your service return GML 3.1 Feature. When the "
"client request for ``mimeType=image/png``, then the ZOO-Kernel will detect "
"that this ``mimeType`` get the ``useMapServer`` option set to true so it "
"will:"
msgstr ""

#: ../../kernel/mapserver.txt:142
msgid ""
"execute the service using the ``<Default>`` block definition (this should be"
" understandable by GDAL/OGR)"
msgstr ""

#: ../../kernel/mapserver.txt:144
msgid ""
"store the result of the service on disk (in the ``[main]`` > ``dataPath`` "
"directory)"
msgstr ""

#: ../../kernel/mapserver.txt:146
msgid ""
"write a Mapfile (in the ``[main]`` > ``dataPath`` directory) using the "
"MapServer C-API to setup both WMS and WFS services."
msgstr ""

#: ../../kernel/mapserver.txt:148
msgid ""
"even if you don't ask for this, the resulting Mapfile includes both "
"configuration for WMS and WFS in case of Vector datasource."
msgstr ""

#: ../../kernel/mapserver.txt:150
msgid ""
"If your service output a raster file, then the behavior is quite the same "
"except that the ZOO-Kernel will setup both WMS and WCS services for the "
"result of the service. Here you cannot define your own style. Nevertheless, "
"when one band raster is returned then the ZOO-Kernel can use its own default"
" style definitions to classify the raster using equivalent intervals (you "
"can easily see that in the outputed Mapfile), this classification is "
"specific to WMS protocol. You should add a ``msClassify`` parameter and set "
"it to ``true`` in your output ComplexData ``<Default>`` or ``<Supported>`` "
"node to activate this classification. Special note for client implementers"
msgstr ""

#: ../../kernel/mapserver.txt:153
msgid ""
"Note that depending on the request, the ZOO-Kernel can return a location "
"header."
msgstr ""

#: ../../kernel/mapserver.txt:155
msgid "Differente request types:"
msgstr ""

#: ../../kernel/mapserver.txt:157
msgid ""
"ResponseDocument=XXXX@asReference=true - in this case, the Kernel will "
"return the GetMap/GetFeature/GetCoverage request in KVP in the href of the "
"result."
msgstr ""

#: ../../kernel/mapserver.txt:158
msgid ""
"ResponseDocument=XXXX@asReference=false - in this case, the Kernel will "
"return the result he get using the GetMap/GetFeature/GetCoverage request in "
"KVP used for the href in previous case."
msgstr ""

#: ../../kernel/mapserver.txt:159
msgid ""
"RawDataOutput=XXXX@asReference=true/false - in this case, the Kernel will "
"return the GetMap/GetFeature/GetCoverage request in KVP in the specific "
"location header, which imply that the browser should follow and request "
"MapServer directly."
msgstr ""

#: ../../kernel/mapserver.txt:162
msgid "Simple sample use cases"
msgstr ""

#: ../../kernel/mapserver.txt:164
msgid ""
"Consider the existing BufferPy service from zoo-services/ogr-base-vect-ops-"
"py. Set the following content to your local BufferPy.zcfg file in the Result"
" output definition, then copy it to /usr/lib/cgi-bin/:"
msgstr ""

#: ../../kernel/mapserver.txt:193
msgid ""
"This modifications make your service ready to return result as WMS GetMap or"
" WFS GetFeature requests. Note that some bug occurs locally using the "
"application/vnd.google-earth.kmz output. Raster"
msgstr ""

#: ../../kernel/mapserver.txt:196
msgid ""
"Using the following simple service code we get a service capable to output "
"any kind of internet files (useful for testing this functionality):"
msgstr ""

#: ../../kernel/mapserver.txt:205
msgid ""
"Define the ``[Result]`` output in your ``HelloPy.zcfg`` file with the "
"following ComplexData block content:"
msgstr ""

#: ../../kernel/mapserver.txt:222
msgid ""
"It means that the default output ``mimeType`` is ``image/png``, so a WMS "
"GetMap request will be returned, or the resulting ``image/tiff`` will be "
"returned as WCS GetCoverage request."
msgstr ""

#: ../../kernel/mapserver.txt:224
msgid ""
"With this simple service you can test the new capabilities to output result "
"as WebServices for each mimeTypes. Note, that you'll probably get wrong "
"``mimeType``, as the default was set to ``image/png``."
msgstr ""

#: ../../kernel/mapserver.txt:226
msgid ""
"There is a support for Zipped ShapeFile but I doubt it is really useful. "
"Anyway, as it is present you can test it easily by passing a zip file in "
"``xlink:href`` for the ``a`` value of the ``HelloPy`` service."
msgstr ""

#: ../../kernel/mapserver.txt:232
msgid "Testings"
msgstr ""

#: ../../kernel/mapserver.txt:234
msgid ""
"Using the simple ``HelloPy`` service code, you can use the following urls, "
"note it supposes that you get an available http://localhost/data/data.zip "
"file containing a ShapeFile and a http://localhost/data/demo.tif:"
msgstr ""

#: ../../kernel/mapserver.txt:237
msgid "Test 1: Accessing a remote Zipped Shapefile as WFS GetFeatures Request"
msgstr ""

#: ../../kernel/mapserver.txt:244
msgid "Test 2: Accessing a remote Zipped Shapefile as WMS GetMap Request"
msgstr ""

#: ../../kernel/mapserver.txt:251
msgid "Test 3: Accessing a remote tiff as WMS GetMap Request:"
msgstr ""

#: ../../kernel/mapserver.txt:258
msgid "Test 4: Accessing a remote tiff as WCS GetMap Request:"
msgstr ""
